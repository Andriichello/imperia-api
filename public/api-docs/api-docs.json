{
    "openapi": "3.0.0",
    "info": {
        "title": "imperia-api",
        "version": "0.1"
    },
    "servers": [
        {
            "url": "http://localhost:8080",
            "description": "Mapped server"
        },
        {
            "url": "http://localhost:8080",
            "description": "Current server"
        },
        {
            "url": "https://api.imperia.pp.ua",
            "description": "Google Cloud server"
        }
    ],
    "paths": {
        "/api/login": {
            "post": {
                "tags": [
                    "auth"
                ],
                "summary": "Login user.",
                "description": "Login user.",
                "operationId": "login",
                "requestBody": {
                    "description": "Login user request object.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/LoginRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "User has been successfully logged in.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LoginResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation failed.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorsResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/logout": {
            "delete": {
                "tags": [
                    "auth"
                ],
                "summary": "Logout user.",
                "description": "Logout user.",
                "operationId": "logout",
                "responses": {
                    "200": {
                        "description": "User has been successfully logged out.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LogoutResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/register": {
            "post": {
                "tags": [
                    "auth"
                ],
                "summary": "Register user.",
                "description": "Register user.",
                "operationId": "register",
                "requestBody": {
                    "description": "Register user request object.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RegisterRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "User has been successfully registered.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RegisterResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation failed.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorsResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/banquets": {
            "get": {
                "tags": [
                    "banquets"
                ],
                "summary": "Index banquets.",
                "operationId": "indexBanquets",
                "parameters": [
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "$ref": "#/components/schemas/BanquetIncludes"
                        }
                    },
                    {
                        "name": "filter[search]",
                        "in": "query",
                        "description": "Allows to search by banquet's `title` and customer's `name`, `surname`,\n           `phone` and `email` at the same time",
                        "schema": {
                            "type": "string"
                        },
                        "example": "John"
                    },
                    {
                        "name": "filter[restaurant_id]",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        },
                        "example": 1
                    },
                    {
                        "name": "filter[state]",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "example": "draft,new"
                    },
                    {
                        "name": "filter[from]",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "format": "date"
                        },
                        "example": "2023-01-25"
                    },
                    {
                        "name": "filter[until]",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "format": "date"
                        },
                        "example": "2023-12-25"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Available fields: `start_at`.",
                        "schema": {
                            "type": "string"
                        },
                        "example": "-start_at"
                    },
                    {
                        "name": "page[size]",
                        "in": "query",
                        "schema": {
                            "$ref": "#/components/schemas/PageSize"
                        }
                    },
                    {
                        "name": "page[number]",
                        "in": "query",
                        "schema": {
                            "$ref": "#/components/schemas/PageNumber"
                        }
                    },
                    {
                        "name": "deleted",
                        "in": "query",
                        "schema": {
                            "$ref": "#/components/schemas/DeletedParameter"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Index banquets response object.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IndexBanquetResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthenticatedResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "banquets"
                ],
                "summary": "Store banquet.",
                "operationId": "storeBanquet",
                "requestBody": {
                    "description": "Store banquet request object.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/StoreBanquetRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Create banquet response object.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StoreBanquetResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthenticatedResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/banquets/{id}": {
            "get": {
                "tags": [
                    "banquets"
                ],
                "summary": "Show banquets by id.",
                "operationId": "showBanquet",
                "parameters": [
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "$ref": "#/components/schemas/BanquetIncludes"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of the banquet.",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 1
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Show banquet response object.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ShowBanquetResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthenticatedResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "banquets"
                ],
                "summary": "Delete banquet.",
                "operationId": "destroyBanquet",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of the banquet.",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 1
                    }
                ],
                "requestBody": {
                    "description": "Delete request object.",
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DestroyRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Delete banquet response object.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DestroyBanquetResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthenticatedResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "patch": {
                "tags": [
                    "banquets"
                ],
                "summary": "Update banquet.",
                "operationId": "updateBanquet",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of the banquet.",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 1
                    }
                ],
                "requestBody": {
                    "description": "Update banquet request object.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateBanquetRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Update banquet response object.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdateBanquetResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthenticatedResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/banquets/{id}/restore": {
            "post": {
                "tags": [
                    "banquets"
                ],
                "summary": "Restore banquet.",
                "operationId": "restoreBanquet",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of the banquet.",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 1
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Restore banquet response object.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestoreBanquetResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthenticatedResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/categories": {
            "get": {
                "tags": [
                    "categories"
                ],
                "summary": "Index categories.",
                "operationId": "indexCategories",
                "parameters": [
                    {
                        "name": "page[size]",
                        "in": "query",
                        "schema": {
                            "$ref": "#/components/schemas/PageSize"
                        }
                    },
                    {
                        "name": "page[number]",
                        "in": "query",
                        "schema": {
                            "$ref": "#/components/schemas/PageNumber"
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Available sorts: `popularity` (is default, but in descending order)",
                        "schema": {
                            "type": "string"
                        },
                        "example": "-popularity"
                    },
                    {
                        "name": "filter[restaurants]",
                        "in": "query",
                        "description": "Coma-separated array of restaurant ids. Limits menus to those\n         that are attached at least to one of those restaurants",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "example": "1"
                    },
                    {
                        "name": "filter[target]",
                        "in": "query",
                        "description": "Target class morph slug. Examples: `products`, `tickets`, `services`, `spaces`",
                        "schema": {
                            "type": "string"
                        },
                        "example": "products"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Index categories response object.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IndexCategoryResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthenticatedResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/categories/{id}": {
            "get": {
                "tags": [
                    "categories"
                ],
                "summary": "Show category by id.",
                "operationId": "showCategory",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of the category.",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 1
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Show category response object.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ShowCategoryResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthenticatedResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/comments": {
            "get": {
                "tags": [
                    "comments"
                ],
                "summary": "Index comments.",
                "operationId": "indexComments",
                "parameters": [
                    {
                        "name": "page[size]",
                        "in": "query",
                        "schema": {
                            "$ref": "#/components/schemas/PageSize"
                        }
                    },
                    {
                        "name": "page[number]",
                        "in": "query",
                        "schema": {
                            "$ref": "#/components/schemas/PageNumber"
                        }
                    },
                    {
                        "name": "filter[commentable_id]",
                        "in": "query",
                        "description": "Comment target morph lass id.",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 1
                    },
                    {
                        "name": "filter[commentable_type]",
                        "in": "query",
                        "description": "Comment target class slug. Examples: `customers`, `banquets`,\n    `orders`, `product-field-orders`, `service-field-orders`, `space-field-orders`, `ticket-field-orders`",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": "customers"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Index comments response object.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IndexCommentResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthenticatedResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "comments"
                ],
                "summary": "Store comment.",
                "operationId": "storeComment",
                "requestBody": {
                    "description": "Store comment request object.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/StoreCommentRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Create comment response object.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StoreCommentResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthenticatedResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/comments/{id}": {
            "get": {
                "tags": [
                    "comments"
                ],
                "summary": "Show comment by id.",
                "operationId": "showComment",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of the comment.",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 1
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Show commet response object.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ShowCommentResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthenticatedResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "comments"
                ],
                "summary": "Delete comment.",
                "operationId": "destroyComment",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of the comment.",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 1
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Delete comment response object.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DestroyCommentResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthenticatedResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "patch": {
                "tags": [
                    "comments"
                ],
                "summary": "Update comment.",
                "operationId": "updateComment",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of the comment.",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 1
                    }
                ],
                "requestBody": {
                    "description": "Update comment request object.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateCommentRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Update comment response object.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdateCommentResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthenticatedResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/customers": {
            "get": {
                "tags": [
                    "customers"
                ],
                "summary": "Index customers.",
                "operationId": "indexCustomers",
                "parameters": [
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "$ref": "#/components/schemas/CustomerIncludes"
                        }
                    },
                    {
                        "name": "filter[search]",
                        "in": "query",
                        "description": "Allows to search `name`, `surname`, `phone` and `email` fields at the same time.",
                        "schema": {
                            "type": "string"
                        },
                        "example": "John"
                    },
                    {
                        "name": "filter[name]",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "example": "John"
                    },
                    {
                        "name": "filter[surname]",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "example": "Doe"
                    },
                    {
                        "name": "filter[phone]",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "example": "+38050"
                    },
                    {
                        "name": "filter[email]",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "example": "john.doe@email.com"
                    },
                    {
                        "name": "page[size]",
                        "in": "query",
                        "schema": {
                            "$ref": "#/components/schemas/PageSize"
                        }
                    },
                    {
                        "name": "page[number]",
                        "in": "query",
                        "schema": {
                            "$ref": "#/components/schemas/PageNumber"
                        }
                    },
                    {
                        "name": "deleted",
                        "in": "query",
                        "schema": {
                            "$ref": "#/components/schemas/DeletedParameter"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Index customers response object.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IndexCustomerResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthenticatedResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "customers"
                ],
                "summary": "Store customer.",
                "operationId": "storeCustomer",
                "requestBody": {
                    "description": "Store customer request object.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/StoreCustomerRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Create customer response object.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StoreCustomerResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthenticatedResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/customers/{id}": {
            "get": {
                "tags": [
                    "customers"
                ],
                "summary": "Show customer by id.",
                "operationId": "showCustomer",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of the customer.",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 1
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "$ref": "#/components/schemas/CustomerIncludes"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Show customer response object.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ShowCustomerResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthenticatedResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "customers"
                ],
                "summary": "Delete customer.",
                "operationId": "destroyCustomer",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of the customer.",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 1
                    }
                ],
                "requestBody": {
                    "description": "Delete customer request object.",
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DestroyRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Delete customer response object.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DestroyCustomerResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthenticatedResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "patch": {
                "tags": [
                    "customers"
                ],
                "summary": "Update customer.",
                "operationId": "updateCustomer",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of the customer.",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 1
                    }
                ],
                "requestBody": {
                    "description": "Update customer request object.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateCustomerRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Update customer response object.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdateCustomerResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthenticatedResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/customers/{id}/restore": {
            "post": {
                "tags": [
                    "customers"
                ],
                "summary": "Restore customer.",
                "operationId": "restoreCustomer",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of the customer.",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 1
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Restore customer response object.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestoreCustomerResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthenticatedResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/discounts": {
            "get": {
                "tags": [
                    "discounts"
                ],
                "summary": "Index discounts.",
                "operationId": "indexDiscounts",
                "parameters": [
                    {
                        "name": "page[size]",
                        "in": "query",
                        "schema": {
                            "$ref": "#/components/schemas/PageSize"
                        }
                    },
                    {
                        "name": "page[number]",
                        "in": "query",
                        "schema": {
                            "$ref": "#/components/schemas/PageNumber"
                        }
                    },
                    {
                        "name": "filter[target]",
                        "in": "query",
                        "description": "Target class morph slug. Examples: `products`, `tickets`, `services`, `spaces`",
                        "schema": {
                            "type": "string"
                        },
                        "example": "products"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Index discounts response object.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IndexDiscountResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthenticatedResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/discounts/{id}": {
            "get": {
                "tags": [
                    "discounts"
                ],
                "summary": "Show discount by id.",
                "operationId": "showDiscount",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of the discount.",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 1
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Show discount response object.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ShowDiscountResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthenticatedResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/family-members": {
            "get": {
                "tags": [
                    "family-members"
                ],
                "summary": "Index family members.",
                "operationId": "indexFamilyMembers",
                "parameters": [
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "$ref": "#/components/schemas/FamilyMemberIncludes"
                        }
                    },
                    {
                        "name": "page[size]",
                        "in": "query",
                        "schema": {
                            "$ref": "#/components/schemas/PageSize"
                        }
                    },
                    {
                        "name": "page[number]",
                        "in": "query",
                        "schema": {
                            "$ref": "#/components/schemas/PageNumber"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Index family members response object.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IndexFamilyMemberResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthenticatedResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "family-members"
                ],
                "summary": "Store family member.",
                "operationId": "storeFamilyMember",
                "requestBody": {
                    "description": "Store family member request object.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/StoreFamilyMemberRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Create family member response object.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StoreFamilyMemberResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthenticatedResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/family-members/{id}": {
            "get": {
                "tags": [
                    "family-members"
                ],
                "summary": "Show family member by id.",
                "operationId": "showFamilyMember",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of the family member.",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 1
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "$ref": "#/components/schemas/FamilyMemberIncludes"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Show family member response object.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ShowFamilyMemberResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthenticatedResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "family-members"
                ],
                "summary": "Delete family member.",
                "operationId": "destroyFamilyMember",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of the family member.",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 1
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Update family member response object.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DestroyFamilyMemberResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthenticatedResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "patch": {
                "tags": [
                    "family-members"
                ],
                "summary": "Update family member.",
                "operationId": "updateFamilyMember",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of the family member.",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 1
                    }
                ],
                "requestBody": {
                    "description": "Update family member request object.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateFamilyMemberRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Update family member response object.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdateFamilyMemberResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthenticatedResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/media": {
            "get": {
                "tags": [
                    "media"
                ],
                "summary": "Index media.",
                "operationId": "indexMedia",
                "parameters": [
                    {
                        "name": "page[size]",
                        "in": "query",
                        "schema": {
                            "$ref": "#/components/schemas/PageSize"
                        }
                    },
                    {
                        "name": "page[number]",
                        "in": "query",
                        "schema": {
                            "$ref": "#/components/schemas/PageNumber"
                        }
                    },
                    {
                        "name": "filter[search]",
                        "in": "query",
                        "description": "Can be used for searches.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "example": "Cafe"
                    },
                    {
                        "name": "filter[name]",
                        "in": "query",
                        "description": "Can be used for searches. Is partial.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "example": "Cafe"
                    },
                    {
                        "name": "filter[extension]",
                        "in": "query",
                        "description": "Can be used for searches. Is partial.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "example": "svg"
                    },
                    {
                        "name": "filter[disk]",
                        "in": "query",
                        "description": "Can be used for searches. Is partial.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "example": "public"
                    },
                    {
                        "name": "filter[folder]",
                        "in": "query",
                        "description": "Can be used for searches. Is partial.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "example": "/categories/"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Index media response object.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IndexMediaResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthenticatedResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "media"
                ],
                "summary": "Store media.",
                "operationId": "storeMedia",
                "requestBody": {
                    "description": "Store media request object.",
                    "required": true,
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "allOf": [
                                    {
                                        "properties": {
                                            "file": {
                                                "description": "File",
                                                "type": "string",
                                                "format": "binary"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    {
                                        "$ref": "#/components/schemas/StoreMediaRequest"
                                    }
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Create media response object.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StoreMediaResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthenticatedResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/media/{id}": {
            "get": {
                "tags": [
                    "media"
                ],
                "summary": "Show media by id.",
                "operationId": "showMedia",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of the media.",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 1
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Show media response object.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ShowMediaResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthenticatedResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "media"
                ],
                "summary": "Delete media.",
                "operationId": "destroyMedia",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of the media.",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 1
                    }
                ],
                "requestBody": {
                    "description": "Delete request object.",
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DestroyRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Delete media response object.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DestroyMediaResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthenticatedResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "patch": {
                "tags": [
                    "media"
                ],
                "summary": "Update media.",
                "operationId": "updateMedia",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of the media.",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 1
                    }
                ],
                "requestBody": {
                    "description": "Update media request object.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateMediaRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Update media response object.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdateMediaResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthenticatedResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/menus": {
            "get": {
                "tags": [
                    "menus"
                ],
                "summary": "Index menus.",
                "operationId": "indexMenus",
                "parameters": [
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "$ref": "#/components/schemas/MenuIncludes"
                        }
                    },
                    {
                        "name": "page[size]",
                        "in": "query",
                        "schema": {
                            "$ref": "#/components/schemas/PageSize"
                        }
                    },
                    {
                        "name": "page[number]",
                        "in": "query",
                        "schema": {
                            "$ref": "#/components/schemas/PageNumber"
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Available sorts: `popularity` (is default, but in descending order)",
                        "schema": {
                            "type": "string"
                        },
                        "example": "-popularity"
                    },
                    {
                        "name": "filter[restaurants]",
                        "in": "query",
                        "description": "Coma-separated array of restaurant ids. Limits menus to those\n     * that are attached at least to one of those restaurants",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "example": "1"
                    },
                    {
                        "name": "archived",
                        "in": "query",
                        "schema": {
                            "$ref": "#/components/schemas/ArchivedParameter"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Index menus response object.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IndexMenuResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthenticatedResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/menus/{id}": {
            "get": {
                "tags": [
                    "menus"
                ],
                "summary": "Show menus by id.",
                "operationId": "showMenu",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of the menus.",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 1
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "$ref": "#/components/schemas/MenuIncludes"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Show menus response object.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ShowMenuResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthenticatedResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/model-media": {
            "get": {
                "tags": [
                    "media"
                ],
                "summary": "Get model's media.",
                "operationId": "getModelMedia",
                "parameters": [
                    {
                        "name": "model_id",
                        "in": "query",
                        "description": "Id of the target model.",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": "1"
                    },
                    {
                        "name": "model_type",
                        "in": "query",
                        "description": "Morph type of the target model.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": "products"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Get model's media response object.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetModelMediaResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthenticatedResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "media"
                ],
                "summary": "Set model's media.",
                "operationId": "setModelMedia",
                "requestBody": {
                    "description": "Set model's media request object.",
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SetModelMediaRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Create media response object.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SetModelMediaResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthenticatedResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/notifications": {
            "get": {
                "tags": [
                    "notifications"
                ],
                "summary": "Index notifications.",
                "operationId": "indexNotifications",
                "parameters": [
                    {
                        "name": "page[size]",
                        "in": "query",
                        "schema": {
                            "$ref": "#/components/schemas/PageSize"
                        }
                    },
                    {
                        "name": "page[number]",
                        "in": "query",
                        "schema": {
                            "$ref": "#/components/schemas/PageNumber"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Index notifications response object.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IndexNotificationResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthenticatedResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "notifications"
                ],
                "summary": "Store notification.",
                "operationId": "storeNotification",
                "requestBody": {
                    "description": "Store notification request object.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/StoreNotificationRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Create notification response object.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StoreNotificationResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthenticatedResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/notifications/{id}": {
            "get": {
                "tags": [
                    "notifications"
                ],
                "summary": "Show notification by id.",
                "operationId": "showNotification",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of the notification.",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 1
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Show notification response object.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ShowNotificationResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthenticatedResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "notifications"
                ],
                "summary": "Delete notification.",
                "operationId": "destroyNotification",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of the notification.",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 1
                    }
                ],
                "requestBody": {
                    "description": "Delete request object.",
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DestroyRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Delete notification response object.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DestroyNotificationResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthenticatedResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "patch": {
                "tags": [
                    "notifications"
                ],
                "summary": "Update notification.",
                "operationId": "updateNotification",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of the notification.",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 1
                    }
                ],
                "requestBody": {
                    "description": "Update notification request object.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateNotificationRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Update notification response object.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdateNotificationResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthenticatedResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/notifications/poll": {
            "get": {
                "tags": [
                    "notifications"
                ],
                "summary": "Poll notifications.",
                "operationId": "pollNotifications",
                "parameters": [
                    {
                        "name": "seen",
                        "in": "query",
                        "description": "Optional, false by default (only unseen notifications).",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "example": "false"
                        }
                    },
                    {
                        "name": "system",
                        "in": "query",
                        "description": "Optional, if true, then filters to notifications sent by system.",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "example": "false"
                        }
                    },
                    {
                        "name": "sender_id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Poll notifications response object.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PollNotificationsResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthenticatedResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/orders": {
            "get": {
                "tags": [
                    "orders"
                ],
                "summary": "Index orders.",
                "operationId": "indexOrders",
                "parameters": [
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "$ref": "#/components/schemas/OrderIncludes"
                        }
                    },
                    {
                        "name": "page[size]",
                        "in": "query",
                        "schema": {
                            "$ref": "#/components/schemas/PageSize"
                        }
                    },
                    {
                        "name": "page[number]",
                        "in": "query",
                        "schema": {
                            "$ref": "#/components/schemas/PageNumber"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Index orders response object.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IndexOrderResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthenticatedResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "orders"
                ],
                "summary": "Store order.",
                "operationId": "storeOrder",
                "requestBody": {
                    "description": "Store order request object.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/StoreOrderRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Create order response object.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StoreOrderResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthenticatedResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/orders/{id}": {
            "get": {
                "tags": [
                    "orders"
                ],
                "summary": "Show orders by id.",
                "operationId": "showOrder",
                "parameters": [
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "$ref": "#/components/schemas/OrderIncludes"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of the order.",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 1
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Show order response object.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ShowOrderResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthenticatedResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "orders"
                ],
                "summary": "Delete order.",
                "operationId": "destroyOrder",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of the order.",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 1
                    }
                ],
                "requestBody": {
                    "description": "Delete request object.",
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DestroyRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Delete order response object.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DestroyOrderResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthenticatedResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "patch": {
                "tags": [
                    "orders"
                ],
                "summary": "Update order.",
                "operationId": "updateOrder",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of the order.",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 1
                    }
                ],
                "requestBody": {
                    "description": "Update order request object.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateOrderRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Update order response object.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdateOrderResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthenticatedResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/banquets/{id}/order": {
            "get": {
                "tags": [
                    "banquets"
                ],
                "summary": "Show order by banquet id.",
                "operationId": "showOrderByBanquetId",
                "parameters": [
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "$ref": "#/components/schemas/OrderIncludes"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of the banquet.",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 1
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Show order by banquet id response object.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ShowOrderResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthenticatedResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/orders/{id}/restore": {
            "post": {
                "tags": [
                    "orders"
                ],
                "summary": "Restore order.",
                "operationId": "restoreOrder",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of the order.",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 1
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Restore order response object.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestoreOrderResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthenticatedResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/products": {
            "get": {
                "tags": [
                    "products"
                ],
                "summary": "Index products.",
                "operationId": "indexProducts",
                "parameters": [
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "$ref": "#/components/schemas/ProductIncludes"
                        }
                    },
                    {
                        "name": "page[size]",
                        "in": "query",
                        "schema": {
                            "$ref": "#/components/schemas/PageSize"
                        }
                    },
                    {
                        "name": "page[number]",
                        "in": "query",
                        "schema": {
                            "$ref": "#/components/schemas/PageNumber"
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Available sorts: `popularity` (is default, but in descending order)",
                        "schema": {
                            "type": "string"
                        },
                        "example": "-popularity"
                    },
                    {
                        "name": "filter[ids]",
                        "in": "query",
                        "description": "Coma-separated list of product ids.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "example": "1,2,3"
                    },
                    {
                        "name": "filter[title]",
                        "in": "query",
                        "description": "Can be used for searches. Is partial.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "example": "Mojito"
                    },
                    {
                        "name": "filter[menus]",
                        "in": "query",
                        "description": "Coma-separated array of menu ids. Limits products to those\n     * that are attached at least to one of given menus",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "example": "1,2"
                    },
                    {
                        "name": "filter[categories]",
                        "in": "query",
                        "description": "Coma-separated array of category ids. Limits products to those\n     * that have at least one of given categories attached to them",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "example": "2"
                    },
                    {
                        "name": "filter[restaurants]",
                        "in": "query",
                        "description": "Coma-separated array of restaurant ids. Limits products to those\n     * that are attached at least to one of those restaurants",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "example": "1"
                    },
                    {
                        "name": "archived",
                        "in": "query",
                        "schema": {
                            "$ref": "#/components/schemas/ArchivedParameter"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Index products response object.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IndexProductResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthenticatedResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/products/{id}": {
            "get": {
                "tags": [
                    "products"
                ],
                "summary": "Show product by id.",
                "operationId": "showProduct",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of the products.",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 1
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "$ref": "#/components/schemas/ProductIncludes"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Show products response object.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ShowProductResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthenticatedResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/restaurants": {
            "get": {
                "tags": [
                    "restaurants"
                ],
                "summary": "Index restaurants.",
                "operationId": "indexRestaurants",
                "parameters": [
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "$ref": "#/components/schemas/RestaurantIncludes"
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Available sorts: `popularity` (is default, but in descending order)",
                        "schema": {
                            "type": "string"
                        },
                        "example": "-popularity"
                    },
                    {
                        "name": "filter[slug]",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "example": "first"
                    },
                    {
                        "name": "filter[name]",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "example": "First"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Index restaurants response object.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IndexRestaurantResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthenticatedResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/restaurants/{id}": {
            "get": {
                "tags": [
                    "restaurants"
                ],
                "summary": "Show restaurant by id.",
                "operationId": "showRestaurant",
                "parameters": [
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "$ref": "#/components/schemas/RestaurantIncludes"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of the restaurant.",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 1
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Show restaurant response object.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ShowRestaurantResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthenticatedResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/restaurants/{id}/schedules": {
            "get": {
                "tags": [
                    "restaurants"
                ],
                "summary": "Get restaurant's schedules.",
                "operationId": "getSchedules",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of the restaurant.",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 1
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Get restaurant's schedules response object.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetSchedulesResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthenticatedResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/restaurants/{id}/holidays": {
            "get": {
                "tags": [
                    "restaurants"
                ],
                "summary": "Get restaurant's holidays.",
                "operationId": "getHolidays",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of the restaurant.",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 1
                    },
                    {
                        "name": "days",
                        "in": "query",
                        "description": "Number of days, for which holidays should be returned.",
                        "schema": {
                            "type": "string"
                        },
                        "example": 1
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "Date starting from which holidays should be returned.",
                        "schema": {
                            "type": "string",
                            "format": "date"
                        },
                        "example": "2022-12-25"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Show restaurant's holidays response object.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetHolidaysResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthenticatedResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/restaurant-reviews": {
            "get": {
                "tags": [
                    "restaurant-reviews"
                ],
                "summary": "Index restaurant reviews.",
                "operationId": "indexRestaurantReviews",
                "parameters": [
                    {
                        "name": "page[size]",
                        "in": "query",
                        "schema": {
                            "$ref": "#/components/schemas/PageSize"
                        }
                    },
                    {
                        "name": "page[number]",
                        "in": "query",
                        "schema": {
                            "$ref": "#/components/schemas/PageNumber"
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Available sorts: `created_at` (is default, but in descending order)",
                        "schema": {
                            "type": "string"
                        },
                        "example": "-created_at"
                    },
                    {
                        "name": "filter[restaurant_id]",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "example": "1"
                    },
                    {
                        "name": "filter[ip]",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "example": "127.0.0.1"
                    },
                    {
                        "name": "is_approved",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "example": "true"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Index restaurant review response object.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IndexRestaurantReviewResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthenticatedResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "restaurant-reviews"
                ],
                "summary": "Store banquet.",
                "operationId": "storeRestaurantReview",
                "requestBody": {
                    "description": "Store restaurant review request object.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/StoreRestaurantReviewRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Create restaurant review response object.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StoreRestaurantReviewResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthenticatedResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/restaurant-reviews/{id}": {
            "get": {
                "tags": [
                    "restaurant-reviews"
                ],
                "summary": "Show restaurant reviews by id.",
                "operationId": "showRestaurantReview",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of the restaurant review.",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 1
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Show restaurant review response object.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ShowRestaurantReviewResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthenticatedResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/services": {
            "get": {
                "tags": [
                    "services"
                ],
                "summary": "Index services.",
                "operationId": "indexServices",
                "parameters": [
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "$ref": "#/components/schemas/ServiceIncludes"
                        }
                    },
                    {
                        "name": "page[size]",
                        "in": "query",
                        "schema": {
                            "$ref": "#/components/schemas/PageSize"
                        }
                    },
                    {
                        "name": "page[number]",
                        "in": "query",
                        "schema": {
                            "$ref": "#/components/schemas/PageNumber"
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Available sorts: `popularity` (is default, but in descending order)",
                        "schema": {
                            "type": "string"
                        },
                        "example": "-popularity"
                    },
                    {
                        "name": "filter[title]",
                        "in": "query",
                        "description": "Can be used for searches. Is partial.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "example": "Clown"
                    },
                    {
                        "name": "filter[categories]",
                        "in": "query",
                        "description": "Coma-separated array of category ids. Limits services to those\n     * that have at least one of given categories attached to them",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "example": "2,3"
                    },
                    {
                        "name": "filter[restaurants]",
                        "in": "query",
                        "description": "Coma-separated array of restaurant ids. Limits services to those\n     * that are attached at least to one of those restaurants",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "example": "1"
                    },
                    {
                        "name": "archived",
                        "in": "query",
                        "schema": {
                            "$ref": "#/components/schemas/ArchivedParameter"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Index services response object.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IndexServiceResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthenticatedResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/services/{id}": {
            "get": {
                "tags": [
                    "services"
                ],
                "summary": "Show service by id.",
                "operationId": "showService",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of the services.",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 1
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "$ref": "#/components/schemas/ServiceIncludes"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Show services response object.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ShowServiceResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthenticatedResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/spaces": {
            "get": {
                "tags": [
                    "spaces"
                ],
                "summary": "Index spaces.",
                "operationId": "indexSpaces",
                "parameters": [
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "$ref": "#/components/schemas/SpaceIncludes"
                        }
                    },
                    {
                        "name": "page[size]",
                        "in": "query",
                        "schema": {
                            "$ref": "#/components/schemas/PageSize"
                        }
                    },
                    {
                        "name": "page[number]",
                        "in": "query",
                        "schema": {
                            "$ref": "#/components/schemas/PageNumber"
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Available sorts: `popularity` (is default, but in descending order)",
                        "schema": {
                            "type": "string"
                        },
                        "example": "-popularity"
                    },
                    {
                        "name": "filter[title]",
                        "in": "query",
                        "description": "Can be used for searches. Is partial.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "example": "#1"
                    },
                    {
                        "name": "filter[categories]",
                        "in": "query",
                        "description": "Coma-separated array of category ids. Limits spaces to those\n     * that have at least one of given categories attached to them",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "example": "2,3"
                    },
                    {
                        "name": "filter[restaurants]",
                        "in": "query",
                        "description": "Coma-separated array of restaurant ids. Limits spaces to those\n     * that are attached at least to one of those restaurants",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "example": "1"
                    },
                    {
                        "name": "archived",
                        "in": "query",
                        "schema": {
                            "$ref": "#/components/schemas/ArchivedParameter"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Index spaces response object.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IndexSpaceResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthenticatedResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/spaces/{id}": {
            "get": {
                "tags": [
                    "spaces"
                ],
                "summary": "Show space by id.",
                "operationId": "showSpace",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of the spaces.",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 1
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "$ref": "#/components/schemas/SpaceIncludes"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Show spaces response object.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ShowSpaceResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthenticatedResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/spaces/reservations": {
            "get": {
                "tags": [
                    "spaces"
                ],
                "summary": "Index spaces reservations.",
                "operationId": "indexSpacesReservations",
                "parameters": [
                    {
                        "name": "order_id",
                        "in": "query",
                        "description": "Id of current banquet's order (do not specify if order is just creating).",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "example": ""
                        }
                    },
                    {
                        "name": "start_at",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "date-time",
                            "example": "2022-01-12 11:00:00"
                        }
                    },
                    {
                        "name": "end_at",
                        "in": "query",
                        "description": "Must be after or equal to `start_at`. If not present then `start_at` will be taken.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time",
                            "example": "2022-01-12 13:00:00"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Index spaces reservations response object.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IndexSpaceReservationsResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthenticatedResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/tickets": {
            "get": {
                "tags": [
                    "tickets"
                ],
                "summary": "Index tickets.",
                "operationId": "indexTickets",
                "parameters": [
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "$ref": "#/components/schemas/TicketIncludes"
                        }
                    },
                    {
                        "name": "page[size]",
                        "in": "query",
                        "schema": {
                            "$ref": "#/components/schemas/PageSize"
                        }
                    },
                    {
                        "name": "page[number]",
                        "in": "query",
                        "schema": {
                            "$ref": "#/components/schemas/PageNumber"
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Available sorts: `popularity` (is default, but in descending order)",
                        "schema": {
                            "type": "string"
                        },
                        "example": "-popularity"
                    },
                    {
                        "name": "filter[title]",
                        "in": "query",
                        "description": "Can be used for searches. Is partial.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "example": "Weekend"
                    },
                    {
                        "name": "filter[categories]",
                        "in": "query",
                        "description": "Coma-separated array of category ids. Limits tickets to those\n     * that have at least one of given categories attached to them",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "example": "2,3"
                    },
                    {
                        "name": "filter[restaurants]",
                        "in": "query",
                        "description": "Coma-separated array of restaurant ids. Limits tickets to those\n     * that are attached at least to one of those restaurants",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "example": "1"
                    },
                    {
                        "name": "archived",
                        "in": "query",
                        "schema": {
                            "$ref": "#/components/schemas/ArchivedParameter"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Index tickets response object.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IndexTicketResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthenticatedResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/tickets/{id}": {
            "get": {
                "tags": [
                    "tickets"
                ],
                "summary": "Show ticket by id.",
                "operationId": "showTicket",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of the tickets.",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 1
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "$ref": "#/components/schemas/TicketIncludes"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Show tickets response object.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ShowTicketResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthenticatedResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/users/me": {
            "get": {
                "tags": [
                    "users"
                ],
                "summary": "Get currently logged user.",
                "operationId": "me",
                "parameters": [
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "$ref": "#/components/schemas/MeIncludes"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Get me response object.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MeResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthenticatedResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/users": {
            "get": {
                "tags": [
                    "users"
                ],
                "summary": "Index users.",
                "operationId": "indexUsers",
                "parameters": [
                    {
                        "name": "page[size]",
                        "in": "query",
                        "schema": {
                            "$ref": "#/components/schemas/PageSize"
                        }
                    },
                    {
                        "name": "page[number]",
                        "in": "query",
                        "schema": {
                            "$ref": "#/components/schemas/PageNumber"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Index users response object.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IndexUserResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthenticatedResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/users/{id}": {
            "get": {
                "tags": [
                    "users"
                ],
                "summary": "Show user by id.",
                "operationId": "showUser",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of the user.",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 1
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Show user response object.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ShowUserResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthenticatedResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/user/{id}": {
            "patch": {
                "tags": [
                    "users"
                ],
                "summary": "Update user.",
                "operationId": "updateUser",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of the user.",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 1
                    }
                ],
                "requestBody": {
                    "description": "Update user request object.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateUserRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Update user response object.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdateUserResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthenticatedResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/orders/{id}/invoice/url": {
            "post": {
                "tags": [
                    "invoices"
                ],
                "summary": "Generate url for accessing order's invoice.",
                "operationId": "orderInvoiceUrl",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of the order.",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 1
                    }
                ],
                "requestBody": {
                    "description": "Generate url for accessing order's invoice response.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/OrderInvoiceUrlRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Generate url for accessing order's invoice response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OrderInvoiceUrlResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthenticatedResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/banquets/{id}/invoice/url": {
            "post": {
                "tags": [
                    "invoices"
                ],
                "summary": "Generate url for accessing banquet's invoice.",
                "operationId": "banquetInvoiceUrl",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of the banquet.",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 1
                    }
                ],
                "requestBody": {
                    "description": "Generate url for accessing banquet's invoice response.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BanquetInvoiceUrlRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Generate url for accessing banquet's invoice response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BanquetInvoiceUrlResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthenticatedResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        }
    },
    "components": {
        "schemas": {
            "LoginResponse": {
                "description": "Login response object.",
                "required": [
                    "data",
                    "message"
                ],
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/UserAndTokenResponse"
                    },
                    "message": {
                        "type": "string",
                        "example": "Success"
                    }
                },
                "type": "object"
            },
            "LogoutResponse": {
                "description": "Logout user response object.",
                "required": [
                    "message"
                ],
                "properties": {
                    "message": {
                        "type": "string",
                        "example": "Logged out"
                    }
                },
                "type": "object"
            },
            "RegisterResponse": {
                "description": "Register user response object.",
                "required": [
                    "data",
                    "message"
                ],
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/User"
                    },
                    "message": {
                        "type": "string",
                        "example": "Registered"
                    }
                },
                "type": "object"
            },
            "SuccessResponse": {
                "description": "Succsess response object.",
                "required": [
                    "message"
                ],
                "properties": {
                    "message": {
                        "type": "string",
                        "example": "Success"
                    }
                },
                "type": "object"
            },
            "UnauthenticatedResponse": {
                "description": "Unauthenticated response object.",
                "required": [
                    "message"
                ],
                "properties": {
                    "message": {
                        "type": "string",
                        "example": "Unauthenticated"
                    }
                },
                "type": "object"
            },
            "ValidationErrorsResponse": {
                "description": "Validation errors response object.",
                "required": [
                    "message",
                    "errors"
                ],
                "properties": {
                    "message": {
                        "type": "string",
                        "example": "The given data was invalid."
                    },
                    "errors": {
                        "type": "object",
                        "example": {
                            "example": "The example field is required."
                        }
                    }
                },
                "type": "object"
            },
            "UserAndTokenResponse": {
                "description": "User and token response object.",
                "required": [
                    "token",
                    "user"
                ],
                "properties": {
                    "token": {
                        "type": "string",
                        "example": "1|ARDGny3pfUiPpxaXCKtW1w5B7qqcqAYehtRTVA849X3p"
                    },
                    "user": {
                        "$ref": "#/components/schemas/User"
                    }
                },
                "type": "object"
            },
            "BanquetIncludes": {
                "description": "Coma-separated list of inluded relations.\n    Available relations: `creator`, `customer`, `comments`",
                "type": "string",
                "example": "creator,customer,comments"
            },
            "IndexBanquetResponse": {
                "description": "Index banquets response object.",
                "required": [
                    "data",
                    "meta",
                    "message"
                ],
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Banquet"
                        }
                    },
                    "meta": {
                        "$ref": "#/components/schemas/PaginationMeta"
                    },
                    "message": {
                        "type": "string",
                        "example": "Success"
                    }
                },
                "type": "object"
            },
            "ShowBanquetResponse": {
                "description": "Show banquet response object.",
                "required": [
                    "data",
                    "message"
                ],
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/Banquet"
                    },
                    "message": {
                        "type": "string",
                        "example": "Success"
                    }
                },
                "type": "object"
            },
            "StoreBanquetResponse": {
                "description": "Store banquet response object.",
                "required": [
                    "data",
                    "message"
                ],
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/Banquet"
                    },
                    "message": {
                        "type": "string",
                        "example": "Created"
                    }
                },
                "type": "object"
            },
            "UpdateBanquetResponse": {
                "description": "Update banquet response object.",
                "required": [
                    "data",
                    "message"
                ],
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/Banquet"
                    },
                    "message": {
                        "type": "string",
                        "example": "Success"
                    }
                },
                "type": "object"
            },
            "DestroyBanquetResponse": {
                "description": "Delete banquet response object.",
                "required": [
                    "message"
                ],
                "properties": {
                    "message": {
                        "type": "string",
                        "example": "Deleted"
                    }
                },
                "type": "object"
            },
            "RestoreBanquetResponse": {
                "description": "Restore banquet response object.",
                "required": [
                    "data",
                    "message"
                ],
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/Banquet"
                    },
                    "message": {
                        "type": "string",
                        "example": "Success"
                    }
                },
                "type": "object"
            },
            "IndexCategoryResponse": {
                "description": "Index categories response object.",
                "required": [
                    "data",
                    "meta",
                    "message"
                ],
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Category"
                        }
                    },
                    "meta": {
                        "$ref": "#/components/schemas/PaginationMeta"
                    },
                    "message": {
                        "type": "string",
                        "example": "Success"
                    }
                },
                "type": "object"
            },
            "ShowCategoryResponse": {
                "description": "Show category response object.",
                "required": [
                    "data",
                    "message"
                ],
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/Category"
                    },
                    "message": {
                        "type": "string",
                        "example": "Success"
                    }
                },
                "type": "object"
            },
            "IndexCommentResponse": {
                "description": "Index comments response object.",
                "required": [
                    "data",
                    "meta",
                    "message"
                ],
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Comment"
                        }
                    },
                    "meta": {
                        "$ref": "#/components/schemas/PaginationMeta"
                    },
                    "message": {
                        "type": "string",
                        "example": "Success"
                    }
                },
                "type": "object"
            },
            "ShowCommentResponse": {
                "description": "Show comment response object.",
                "required": [
                    "data",
                    "message"
                ],
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/Comment"
                    },
                    "message": {
                        "type": "string",
                        "example": "Success"
                    }
                },
                "type": "object"
            },
            "StoreCommentResponse": {
                "description": "Store comment response object.",
                "required": [
                    "data",
                    "message"
                ],
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/Comment"
                    },
                    "message": {
                        "type": "string",
                        "example": "Created"
                    }
                },
                "type": "object"
            },
            "UpdateCommentResponse": {
                "description": "Update comment response object.",
                "required": [
                    "data",
                    "message"
                ],
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/Comment"
                    },
                    "message": {
                        "type": "string",
                        "example": "Success"
                    }
                },
                "type": "object"
            },
            "DestroyCommentResponse": {
                "description": "Delete comment response object.",
                "required": [
                    "message"
                ],
                "properties": {
                    "message": {
                        "type": "string",
                        "example": "Deleted"
                    }
                },
                "type": "object"
            },
            "IndexCustomerResponse": {
                "description": "Index customers response object.",
                "required": [
                    "data",
                    "meta",
                    "message"
                ],
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Customer"
                        }
                    },
                    "meta": {
                        "$ref": "#/components/schemas/PaginationMeta"
                    },
                    "message": {
                        "type": "string",
                        "example": "Success"
                    }
                },
                "type": "object"
            },
            "ShowCustomerResponse": {
                "description": "Show customer response object.",
                "required": [
                    "data",
                    "message"
                ],
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/Customer"
                    },
                    "message": {
                        "type": "string",
                        "example": "Success"
                    }
                },
                "type": "object"
            },
            "StoreCustomerResponse": {
                "description": "Store customer response object.",
                "required": [
                    "data",
                    "message"
                ],
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/Customer"
                    },
                    "message": {
                        "type": "string",
                        "example": "Created"
                    }
                },
                "type": "object"
            },
            "UpdateCustomerResponse": {
                "description": "Update customer response object.",
                "required": [
                    "data",
                    "message"
                ],
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/Customer"
                    },
                    "message": {
                        "type": "string",
                        "example": "Success"
                    }
                },
                "type": "object"
            },
            "DestroyCustomerResponse": {
                "description": "Delete customer response object.",
                "required": [
                    "message"
                ],
                "properties": {
                    "message": {
                        "type": "string",
                        "example": "Deleted"
                    }
                },
                "type": "object"
            },
            "RestoreCustomerResponse": {
                "description": "Restore customer response object.",
                "required": [
                    "data",
                    "message"
                ],
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/Customer"
                    },
                    "message": {
                        "type": "string",
                        "example": "Success"
                    }
                },
                "type": "object"
            },
            "CustomerIncludes": {
                "description": "Coma-separated list of inluded relations.\n     Available relations: `comments`, `family_members`",
                "type": "string",
                "example": "family_members,comments"
            },
            "IndexDiscountResponse": {
                "description": "Index discounts response object.",
                "required": [
                    "data",
                    "meta",
                    "message"
                ],
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Discount"
                        }
                    },
                    "meta": {
                        "$ref": "#/components/schemas/PaginationMeta"
                    },
                    "message": {
                        "type": "string",
                        "example": "Success"
                    }
                },
                "type": "object"
            },
            "ShowDiscountResponse": {
                "description": "Show discount response object.",
                "required": [
                    "data",
                    "message"
                ],
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/Discount"
                    },
                    "message": {
                        "type": "string",
                        "example": "Success"
                    }
                },
                "type": "object"
            },
            "IndexFamilyMemberResponse": {
                "description": "Index family members response object.",
                "required": [
                    "data",
                    "meta",
                    "message"
                ],
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FamilyMember"
                        }
                    },
                    "meta": {
                        "$ref": "#/components/schemas/PaginationMeta"
                    },
                    "message": {
                        "type": "string",
                        "example": "Success"
                    }
                },
                "type": "object"
            },
            "ShowFamilyMemberResponse": {
                "description": "Show family member response object.",
                "required": [
                    "data",
                    "message"
                ],
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/FamilyMember"
                    },
                    "message": {
                        "type": "string",
                        "example": "Success"
                    }
                },
                "type": "object"
            },
            "StoreFamilyMemberResponse": {
                "description": "Store family member response object.",
                "required": [
                    "data",
                    "message"
                ],
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/FamilyMember"
                    },
                    "message": {
                        "type": "string",
                        "example": "Created"
                    }
                },
                "type": "object"
            },
            "UpdateFamilyMemberResponse": {
                "description": "Update family member response object.",
                "required": [
                    "data",
                    "message"
                ],
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/FamilyMember"
                    },
                    "message": {
                        "type": "string",
                        "example": "Success"
                    }
                },
                "type": "object"
            },
            "DestroyFamilyMemberResponse": {
                "description": "Delete family member response object.",
                "required": [
                    "message"
                ],
                "properties": {
                    "message": {
                        "type": "string",
                        "example": "Deleted"
                    }
                },
                "type": "object"
            },
            "FamilyMemberIncludes": {
                "description": "Coma-separated list of inluded relations.\n    Available relations: `relative`",
                "type": "string",
                "example": "relative"
            },
            "IndexMediaResponse": {
                "description": "Index media response object.",
                "required": [
                    "data",
                    "meta",
                    "message"
                ],
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Media"
                        }
                    },
                    "meta": {
                        "$ref": "#/components/schemas/PaginationMeta"
                    },
                    "message": {
                        "type": "string",
                        "example": "Success"
                    }
                },
                "type": "object"
            },
            "ShowMediaResponse": {
                "description": "Show media response object.",
                "required": [
                    "data",
                    "message"
                ],
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/Media"
                    },
                    "message": {
                        "type": "string",
                        "example": "Success"
                    }
                },
                "type": "object"
            },
            "StoreMediaResponse": {
                "description": "Store media response object.",
                "required": [
                    "data",
                    "message"
                ],
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/Media"
                    },
                    "message": {
                        "type": "string",
                        "example": "Created"
                    }
                },
                "type": "object"
            },
            "UpdateMediaResponse": {
                "description": "Update media response object.",
                "required": [
                    "data",
                    "message"
                ],
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/Media"
                    },
                    "message": {
                        "type": "string",
                        "example": "Success"
                    }
                },
                "type": "object"
            },
            "DestroyMediaResponse": {
                "description": "Delete banquet response object.",
                "required": [
                    "message"
                ],
                "properties": {
                    "message": {
                        "type": "string",
                        "example": "Deleted"
                    }
                },
                "type": "object"
            },
            "IndexMenuResponse": {
                "description": "Index menus response object.",
                "required": [
                    "data",
                    "meta",
                    "message"
                ],
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Menu"
                        }
                    },
                    "meta": {
                        "$ref": "#/components/schemas/PaginationMeta"
                    },
                    "message": {
                        "type": "string",
                        "example": "Success"
                    }
                },
                "type": "object"
            },
            "ShowMenuResponse": {
                "description": "Show menu response object.",
                "required": [
                    "data",
                    "message"
                ],
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/Menu"
                    },
                    "message": {
                        "type": "string",
                        "example": "Success"
                    }
                },
                "type": "object"
            },
            "MenuIncludes": {
                "description": "Coma-separated list of inluded relations.\n    Available relations: `products`",
                "type": "string",
                "example": "products"
            },
            "GetModelMediaResponse": {
                "description": "Get model's media response object.",
                "required": [
                    "data",
                    "message"
                ],
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Media"
                        }
                    },
                    "message": {
                        "type": "string",
                        "example": "Success"
                    }
                },
                "type": "object"
            },
            "SetModelMediaResponse": {
                "description": "Set model's media response object.",
                "required": [
                    "data",
                    "message"
                ],
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Media"
                        }
                    },
                    "message": {
                        "type": "string",
                        "example": "Success"
                    }
                },
                "type": "object"
            },
            "IndexNotificationResponse": {
                "description": "Index notifications response object.",
                "required": [
                    "data",
                    "meta",
                    "message"
                ],
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Notification"
                        }
                    },
                    "meta": {
                        "$ref": "#/components/schemas/PaginationMeta"
                    },
                    "message": {
                        "type": "string",
                        "example": "Success"
                    }
                },
                "type": "object"
            },
            "PollNotificationsResponse": {
                "description": "Poll notifications response object.",
                "required": [
                    "data",
                    "meta",
                    "message"
                ],
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/NotificationsPoll"
                    },
                    "message": {
                        "type": "string",
                        "example": "Success"
                    }
                },
                "type": "object"
            },
            "ShowNotificationResponse": {
                "description": "Show notification response object.",
                "required": [
                    "data",
                    "message"
                ],
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/Notification"
                    },
                    "message": {
                        "type": "string",
                        "example": "Success"
                    }
                },
                "type": "object"
            },
            "StoreNotificationResponse": {
                "description": "Store notification response object.",
                "required": [
                    "data",
                    "message"
                ],
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/Notification"
                    },
                    "message": {
                        "type": "string",
                        "example": "Created"
                    }
                },
                "type": "object"
            },
            "UpdateNotificationResponse": {
                "description": "Update notification response object.",
                "required": [
                    "data",
                    "message"
                ],
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/Notification"
                    },
                    "message": {
                        "type": "string",
                        "example": "Success"
                    }
                },
                "type": "object"
            },
            "DestroyNotificationResponse": {
                "description": "Delete notification response object.",
                "required": [
                    "message"
                ],
                "properties": {
                    "message": {
                        "type": "string",
                        "example": "Deleted"
                    }
                },
                "type": "object"
            },
            "RestoreNotificationResponse": {
                "description": "Restore notification response object.",
                "required": [
                    "data",
                    "message"
                ],
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/Notification"
                    },
                    "message": {
                        "type": "string",
                        "example": "Success"
                    }
                },
                "type": "object"
            },
            "OrderIncludes": {
                "description": "Coma-separated list of inluded relations. Available relations:\n    `comments`, `spaces.comments`, `tickets.comments`, `products.comments`, `services.comments`",
                "type": "string",
                "example": "comments,spaces.comments,tickets.comments,products.comments,services.comments"
            },
            "IndexOrderResponse": {
                "description": "Index orders response object.",
                "required": [
                    "data",
                    "meta",
                    "message"
                ],
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Order"
                        }
                    },
                    "meta": {
                        "$ref": "#/components/schemas/PaginationMeta"
                    },
                    "message": {
                        "type": "string",
                        "example": "Success"
                    }
                },
                "type": "object"
            },
            "ShowOrderResponse": {
                "description": "Show order response object.",
                "required": [
                    "data",
                    "message"
                ],
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/Order"
                    },
                    "message": {
                        "type": "string",
                        "example": "Success"
                    }
                },
                "type": "object"
            },
            "StoreOrderResponse": {
                "description": "Store order response object.",
                "required": [
                    "data",
                    "message"
                ],
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/Order"
                    },
                    "message": {
                        "type": "string",
                        "example": "Created"
                    }
                },
                "type": "object"
            },
            "UpdateOrderResponse": {
                "description": "Update order response object.",
                "required": [
                    "data",
                    "message"
                ],
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/Order"
                    },
                    "message": {
                        "type": "string",
                        "example": "Success"
                    }
                },
                "type": "object"
            },
            "DestroyOrderResponse": {
                "description": "Delete order response object.",
                "required": [
                    "message"
                ],
                "properties": {
                    "message": {
                        "type": "string",
                        "example": "Deleted"
                    }
                },
                "type": "object"
            },
            "RestoreOrderResponse": {
                "description": "Restore order response object.",
                "required": [
                    "data",
                    "message"
                ],
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/Order"
                    },
                    "message": {
                        "type": "string",
                        "example": "Success"
                    }
                },
                "type": "object"
            },
            "IndexProductResponse": {
                "description": "Index products response object.",
                "required": [
                    "data",
                    "meta",
                    "message"
                ],
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Product"
                        }
                    },
                    "meta": {
                        "$ref": "#/components/schemas/PaginationMeta"
                    },
                    "message": {
                        "type": "string",
                        "example": "Success"
                    }
                },
                "type": "object"
            },
            "ShowProductResponse": {
                "description": "Show products response object.",
                "required": [
                    "data",
                    "message"
                ],
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/Product"
                    },
                    "message": {
                        "type": "string",
                        "example": "Success"
                    }
                },
                "type": "object"
            },
            "ProductIncludes": {
                "description": "Coma-separated list of inluded relations.\n    Available relations: `categories`",
                "type": "string",
                "example": "categories"
            },
            "RestaurantIncludes": {
                "description": "Coma-separated list of inluded relations.\n            Available relations: `schedules`",
                "type": "string",
                "example": "schedules"
            },
            "IndexRestaurantResponse": {
                "description": "Index restaurant response object.",
                "required": [
                    "data",
                    "meta",
                    "message"
                ],
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Restaurant"
                        }
                    },
                    "meta": {
                        "$ref": "#/components/schemas/PaginationMeta"
                    },
                    "message": {
                        "type": "string",
                        "example": "Success"
                    }
                },
                "type": "object"
            },
            "ShowRestaurantResponse": {
                "description": "Show restaurant response object.",
                "required": [
                    "data",
                    "message"
                ],
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/Restaurant"
                    },
                    "message": {
                        "type": "string",
                        "example": "Success"
                    }
                },
                "type": "object"
            },
            "GetSchedulesResponse": {
                "description": "Get restaurant's schedules response object.",
                "required": [
                    "data",
                    "message"
                ],
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Schedule"
                        }
                    },
                    "message": {
                        "type": "string",
                        "example": "Success"
                    }
                },
                "type": "object"
            },
            "GetHolidaysResponse": {
                "description": "Get restaurant's holidays response object.",
                "required": [
                    "data",
                    "message"
                ],
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Holiday"
                        }
                    },
                    "message": {
                        "type": "string",
                        "example": "Success"
                    }
                },
                "type": "object"
            },
            "IndexRestaurantReviewResponse": {
                "description": "Index restaurant reviews response object.",
                "required": [
                    "data",
                    "meta",
                    "message"
                ],
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RestaurantReview"
                        }
                    },
                    "meta": {
                        "$ref": "#/components/schemas/PaginationMeta"
                    },
                    "message": {
                        "type": "string",
                        "example": "Success"
                    }
                },
                "type": "object"
            },
            "ShowRestaurantReviewResponse": {
                "description": "Show restaurant review response object.",
                "required": [
                    "data",
                    "message"
                ],
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/RestaurantReview"
                    },
                    "message": {
                        "type": "string",
                        "example": "Success"
                    }
                },
                "type": "object"
            },
            "StoreRestaurantReviewResponse": {
                "description": "Store restaurant review response object.",
                "required": [
                    "data",
                    "message"
                ],
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/RestaurantReview"
                    },
                    "message": {
                        "type": "string",
                        "example": "Created"
                    }
                },
                "type": "object"
            },
            "IndexServiceResponse": {
                "description": "Index services response object.",
                "required": [
                    "data",
                    "meta",
                    "message"
                ],
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Service"
                        }
                    },
                    "meta": {
                        "$ref": "#/components/schemas/PaginationMeta"
                    },
                    "message": {
                        "type": "string",
                        "example": "Success"
                    }
                },
                "type": "object"
            },
            "ShowServiceResponse": {
                "description": "Show services response object.",
                "required": [
                    "data",
                    "message"
                ],
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/Service"
                    },
                    "message": {
                        "type": "string",
                        "example": "Success"
                    }
                },
                "type": "object"
            },
            "ServiceIncludes": {
                "description": "Coma-separated list of inluded relations.\n    Available relations: `categories`",
                "type": "string",
                "example": "categories"
            },
            "IndexSpaceResponse": {
                "description": "Index spaces response object.",
                "required": [
                    "data",
                    "meta",
                    "message"
                ],
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Space"
                        }
                    },
                    "meta": {
                        "$ref": "#/components/schemas/PaginationMeta"
                    },
                    "message": {
                        "type": "string",
                        "example": "Success"
                    }
                },
                "type": "object"
            },
            "ShowSpaceResponse": {
                "description": "Show spaces response object.",
                "required": [
                    "data",
                    "message"
                ],
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/Space"
                    },
                    "message": {
                        "type": "string",
                        "example": "Success"
                    }
                },
                "type": "object"
            },
            "IndexSpaceReservationsResponse": {
                "description": "Index spaces reservations response object.",
                "required": [
                    "data",
                    "meta",
                    "message"
                ],
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/SpaceReservation"
                        }
                    },
                    "meta": {
                        "$ref": "#/components/schemas/PaginationMeta"
                    },
                    "message": {
                        "type": "string",
                        "example": "Success"
                    }
                },
                "type": "object"
            },
            "SpaceIncludes": {
                "description": "Coma-separated list of inluded relations.\n    Available relations: `categories`",
                "type": "string",
                "example": "categories"
            },
            "IndexTicketResponse": {
                "description": "Index tickets response object.",
                "required": [
                    "data",
                    "meta",
                    "message"
                ],
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Ticket"
                        }
                    },
                    "meta": {
                        "$ref": "#/components/schemas/PaginationMeta"
                    },
                    "message": {
                        "type": "string",
                        "example": "Success"
                    }
                },
                "type": "object"
            },
            "ShowTicketResponse": {
                "description": "Show tickets response object.",
                "required": [
                    "data",
                    "message"
                ],
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/Ticket"
                    },
                    "message": {
                        "type": "string",
                        "example": "Success"
                    }
                },
                "type": "object"
            },
            "TicketIncludes": {
                "description": "Coma-separated list of inluded relations.\n    Available relations: `categories`",
                "type": "string",
                "example": "categories"
            },
            "MeIncludes": {
                "description": "Coma-separated list of inluded relations.\n    Available relations: `customer`",
                "type": "string",
                "example": "customer"
            },
            "MeResponse": {
                "description": "Get me response object.",
                "required": [
                    "data",
                    "message"
                ],
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/User"
                    },
                    "message": {
                        "type": "string",
                        "example": "Success"
                    }
                },
                "type": "object"
            },
            "IndexUserResponse": {
                "description": "Index users response object.",
                "required": [
                    "data",
                    "meta",
                    "message"
                ],
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/User"
                        }
                    },
                    "meta": {
                        "$ref": "#/components/schemas/PaginationMeta"
                    },
                    "message": {
                        "type": "string",
                        "example": "Success"
                    }
                },
                "type": "object"
            },
            "ShowUserResponse": {
                "description": "Show user response object.",
                "required": [
                    "data",
                    "message"
                ],
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/User"
                    },
                    "message": {
                        "type": "string",
                        "example": "Success"
                    }
                },
                "type": "object"
            },
            "UpdateUserResponse": {
                "description": "Update user response object.",
                "required": [
                    "data",
                    "message"
                ],
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/User"
                    },
                    "message": {
                        "type": "string",
                        "example": "Success"
                    }
                },
                "type": "object"
            },
            "OrderInvoiceUrlResponse": {
                "description": "Generate url for accessing order's invoice response.",
                "required": [
                    "url",
                    "message"
                ],
                "properties": {
                    "url": {
                        "type": "string",
                        "example": "http://host/path?signature=long-string"
                    },
                    "message": {
                        "type": "string",
                        "example": "Success"
                    }
                },
                "type": "object"
            },
            "BanquetInvoiceUrlResponse": {
                "description": "Generate url for accessing banquet's invoice response.",
                "required": [
                    "url",
                    "message"
                ],
                "properties": {
                    "url": {
                        "type": "string",
                        "example": "http://host/path?signature=long-string"
                    },
                    "message": {
                        "type": "string",
                        "example": "Success"
                    }
                },
                "type": "object"
            },
            "PageSize": {
                "description": "Max number of results on page.",
                "type": "integer",
                "example": 25
            },
            "PageNumber": {
                "description": "Page number to be returned.",
                "type": "integer",
                "example": 1
            },
            "LoginRequest": {
                "description": "Supports login by credantials (`email` and `password`) and\n    by remember token (`remember_token`).",
                "properties": {
                    "email": {
                        "description": "By credentials. Required with `password`",
                        "type": "string",
                        "example": "john.doe@email.com"
                    },
                    "password": {
                        "description": "By credentials. Required with `email`",
                        "type": "string",
                        "example": "pa$$w0rd"
                    },
                    "remember_token": {
                        "description": "By remember token",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "RegisterRequest": {
                "description": "Register user request",
                "required": [
                    "name",
                    "surnane",
                    "email",
                    "password",
                    "password_confirmation"
                ],
                "properties": {
                    "name": {
                        "type": "string",
                        "example": "John"
                    },
                    "surname": {
                        "type": "string",
                        "example": "Doe"
                    },
                    "email": {
                        "type": "string",
                        "example": "john.doe@email.com"
                    },
                    "phone": {
                        "type": "string",
                        "example": "null",
                        "nullable": "true"
                    },
                    "password": {
                        "type": "string",
                        "example": "pa$$w0rd"
                    },
                    "password_confirmation": {
                        "type": "string",
                        "example": "pa$$w0rd"
                    }
                },
                "type": "object"
            },
            "StoreBanquetRequest": {
                "description": "Store banquet request",
                "required": [
                    "title",
                    "description",
                    "state",
                    "start_at",
                    "end_at",
                    "customer_id"
                ],
                "properties": {
                    "title": {
                        "type": "string",
                        "example": "Banquet title."
                    },
                    "description": {
                        "type": "string",
                        "example": "Banquet description..."
                    },
                    "state": {
                        "type": "string",
                        "enum": [
                            "draft",
                            "new"
                        ],
                        "example": "draft"
                    },
                    "creator_id": {
                        "description": "Id of the user, who created banquet.",
                        "type": "integer",
                        "example": 1
                    },
                    "customer_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "restaurant_id": {
                        "type": "integer",
                        "example": 1,
                        "nullable": "true"
                    },
                    "advance_amount": {
                        "type": "float",
                        "example": 535.25
                    },
                    "start_at": {
                        "description": "Date and time of when banquet should start.",
                        "type": "string",
                        "format": "date-time",
                        "example": "2022-01-12 10:00:00"
                    },
                    "end_at": {
                        "description": "Date and time of when banquet should end. Must be after or equal to `start_at`.",
                        "type": "string",
                        "format": "date-time",
                        "example": "2022-01-12 23:00:00"
                    },
                    "paid_at": {
                        "description": "Date and time of when banquet was fully paid for.",
                        "type": "string",
                        "format": "date-time",
                        "example": null,
                        "nullable": "true"
                    },
                    "comments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AttachingComment"
                        }
                    },
                    "discounts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AttachingDiscount"
                        }
                    }
                },
                "type": "object"
            },
            "UpdateBanquetRequest": {
                "description": "Update banquet request",
                "properties": {
                    "title": {
                        "type": "string",
                        "example": "Banquet title."
                    },
                    "description": {
                        "type": "string",
                        "example": "Banquet description..."
                    },
                    "state": {
                        "description": "Banquet state available changes depends on current state.\n    All states: `draft`, `new`, `processing`, `completed`, `cancelled`.",
                        "type": "string",
                        "example": "draft"
                    },
                    "creator_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "customer_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "restaurant_id": {
                        "type": "integer",
                        "example": 1,
                        "nullable": "true"
                    },
                    "advance_amount": {
                        "type": "float",
                        "example": 535.25
                    },
                    "start_at": {
                        "description": "Date and time of when banquet should start.",
                        "type": "string",
                        "format": "date-time",
                        "example": "2022-01-12 10:00:00"
                    },
                    "end_at": {
                        "description": "Date and time of when banquet should end. Must be after or equal to `start_at`.",
                        "type": "string",
                        "format": "date-time",
                        "example": "2022-01-12 23:00:00"
                    },
                    "paid_at": {
                        "description": "Date and time of when banquet was fully paid for.",
                        "type": "string",
                        "format": "date-time",
                        "example": null,
                        "nullable": "true"
                    },
                    "comments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AttachingComment"
                        }
                    },
                    "discounts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AttachingDiscount"
                        }
                    }
                },
                "type": "object"
            },
            "AttachingComment": {
                "description": "Attaching comment",
                "required": [
                    "text"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "commentable_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "commentable_type": {
                        "type": "string",
                        "example": "products"
                    },
                    "text": {
                        "type": "string",
                        "example": "Example comment..."
                    }
                },
                "type": "object"
            },
            "StoreCommentRequest": {
                "description": "Store comment request",
                "required": [
                    "text",
                    "commentable_id",
                    "commentable_type"
                ],
                "properties": {
                    "text": {
                        "type": "string",
                        "example": "This is a comment text..."
                    },
                    "commentable_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "commentable_type": {
                        "description": "Value for it must be obrained from the target resource's type property.",
                        "type": "string",
                        "example": "customers"
                    }
                },
                "type": "object"
            },
            "UpdateCommentRequest": {
                "description": "Update comment request",
                "required": [
                    "text"
                ],
                "properties": {
                    "text": {
                        "type": "string",
                        "example": "This is a comment text..."
                    }
                },
                "type": "object"
            },
            "DestroyRequest": {
                "description": "Destroy request",
                "properties": {
                    "force": {
                        "description": "Determines whether resource should be deleted without chance of restoring.",
                        "type": "boolean",
                        "example": "false"
                    }
                },
                "type": "object"
            },
            "DeletedParameter": {
                "description": "Query parameter, which determines if soft-deleted records should be\n    fetched from database. Available relations: `only`, `with` and `without`, which is a default one.",
                "type": "string",
                "enum": [
                    "only",
                    "with",
                    "without"
                ],
                "example": "without"
            },
            "StoreCustomerRequest": {
                "description": "Store customer request",
                "required": [
                    "name",
                    "surname",
                    "email",
                    "phone",
                    "birthdate"
                ],
                "properties": {
                    "name": {
                        "type": "string",
                        "example": "John"
                    },
                    "surname": {
                        "type": "string",
                        "example": "Forrester"
                    },
                    "email": {
                        "type": "string",
                        "example": "ben.forrester@email.com"
                    },
                    "phone": {
                        "description": "Phone number may start with a plus and must contain only digits 0-9.",
                        "type": "string",
                        "example": "+380507777777",
                        "nullable": "true"
                    },
                    "birthdate": {
                        "type": "string",
                        "format": "date",
                        "example": "1992-10-16",
                        "nullable": "true"
                    }
                },
                "type": "object"
            },
            "UpdateCustomerRequest": {
                "description": "Update customer request",
                "properties": {
                    "name": {
                        "type": "string",
                        "example": "John"
                    },
                    "surname": {
                        "type": "string",
                        "example": "Forrester"
                    },
                    "email": {
                        "type": "string",
                        "example": "ben.forrester@email.com"
                    },
                    "phone": {
                        "description": "Phone number may start with a plus and must contain only digits 0-9.",
                        "type": "string",
                        "example": "+380507777777"
                    },
                    "birthdate": {
                        "type": "string",
                        "format": "date",
                        "example": "1992-10-16"
                    }
                },
                "type": "object"
            },
            "AttachingDiscount": {
                "description": "Attaching discount",
                "required": [
                    "discount_id"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "discount_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "discountable_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "discountable_type": {
                        "type": "string",
                        "example": "products"
                    }
                },
                "type": "object"
            },
            "StoreFamilyMemberRequest": {
                "description": "Store family member request",
                "required": [
                    "name",
                    "relation",
                    "birthdate",
                    "relative_id"
                ],
                "properties": {
                    "name": {
                        "type": "string",
                        "example": "Kate"
                    },
                    "relation": {
                        "type": "string",
                        "enum": [
                            "child",
                            "parent",
                            "grandparent",
                            "partner"
                        ],
                        "nullable": "true"
                    },
                    "birthdate": {
                        "type": "string",
                        "format": "date",
                        "example": "1992-10-16"
                    },
                    "relative_id": {
                        "description": "The id of the customer, who is related to this family member.",
                        "type": "integer",
                        "example": 1
                    }
                },
                "type": "object"
            },
            "UpdateFamilyMemberRequest": {
                "description": "Update family member request",
                "properties": {
                    "name": {
                        "type": "string",
                        "example": "Kate"
                    },
                    "relation": {
                        "type": "string",
                        "enum": [
                            "child",
                            "parent",
                            "grandparent",
                            "partner"
                        ]
                    },
                    "birthdate": {
                        "type": "string",
                        "format": "date",
                        "example": "1992-10-16"
                    },
                    "relative_id": {
                        "description": "The id of the customer, who is related to this family member.",
                        "type": "integer",
                        "example": 1
                    }
                },
                "type": "object"
            },
            "OrderInvoiceUrlRequest": {
                "description": "Generate url for accessing order's invoice request",
                "properties": {
                    "endpoint": {
                        "type": "string",
                        "enum": [
                            "pdf",
                            "view"
                        ],
                        "example": "pdf"
                    }
                },
                "type": "object"
            },
            "BanquetInvoiceUrlRequest": {
                "description": "Generate url for accessing banquet's invoice request",
                "properties": {
                    "endpoint": {
                        "type": "string",
                        "enum": [
                            "pdfThroughBanquet",
                            "viewThroughBanquet"
                        ],
                        "example": "pdfThroughBanquet"
                    }
                },
                "type": "object"
            },
            "StoreMediaRequest": {
                "description": "Store media request",
                "required": [
                    "file",
                    "name"
                ],
                "properties": {
                    "file": {
                        "type": "string",
                        "format": "binary"
                    },
                    "name": {
                        "type": "string",
                        "example": "drinks.svg"
                    },
                    "title": {
                        "type": "string",
                        "example": "Drinks",
                        "nullable": "true"
                    },
                    "description": {
                        "type": "string",
                        "nullable": "true"
                    },
                    "disk": {
                        "type": "string",
                        "enum": [
                            "public",
                            "uploads"
                        ],
                        "example": "public"
                    },
                    "folder": {
                        "description": "Must start and end with the `/`.",
                        "type": "string",
                        "example": "/media/"
                    },
                    "metadata": {
                        "type": "object",
                        "example": "{}",
                        "nullable": "true"
                    }
                },
                "type": "object"
            },
            "UpdateMediaRequest": {
                "description": "Update media request",
                "properties": {
                    "file": {
                        "type": "file"
                    },
                    "name": {
                        "type": "string",
                        "example": "drinks.svg"
                    },
                    "title": {
                        "type": "string",
                        "example": "Drinks",
                        "nullable": "true"
                    },
                    "description": {
                        "type": "string",
                        "nullable": "true"
                    },
                    "folder": {
                        "description": "Must start and end with the `/`.",
                        "type": "string",
                        "example": "/media/"
                    },
                    "metadata": {
                        "type": "object",
                        "example": "{}",
                        "nullable": "true"
                    }
                },
                "type": "object"
            },
            "AttachingMedia": {
                "description": "Attaching media",
                "required": [
                    "id"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    }
                },
                "type": "object"
            },
            "SetModelMediaRequest": {
                "description": "Set model's media request",
                "properties": {
                    "model_id": {
                        "type": "integer",
                        "example": "1"
                    },
                    "model_type": {
                        "type": "string",
                        "example": "products"
                    },
                    "media": {
                        "description": "Will be stored/updated according to the given order.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AttachingMedia"
                        }
                    }
                },
                "type": "object"
            },
            "StoreNotificationRequest": {
                "description": "Store notification request",
                "required": [
                    "subject",
                    "body",
                    "payload",
                    "receiver_id"
                ],
                "properties": {
                    "subject": {
                        "type": "string",
                        "example": "Notification subject."
                    },
                    "body": {
                        "type": "string",
                        "example": "Notification body..."
                    },
                    "payload": {
                        "type": "object",
                        "example": "{}",
                        "nullable": "true"
                    },
                    "receiver_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "channel": {
                        "type": "string",
                        "enum": [
                            "default"
                        ],
                        "example": "default"
                    },
                    "send_at": {
                        "description": "Date and time when notification should be sent. Only future values are acceptable.",
                        "type": "string",
                        "format": "date-time",
                        "example": "2022-12-12 10:00:00"
                    }
                },
                "type": "object"
            },
            "UpdateNotificationRequest": {
                "description": "Update notification request",
                "properties": {
                    "subject": {
                        "type": "string",
                        "example": "Notification subject."
                    },
                    "body": {
                        "type": "string",
                        "example": "Notification body..."
                    },
                    "payload": {
                        "type": "object",
                        "example": "{}",
                        "nullable": "true"
                    },
                    "send_at": {
                        "description": "Date and time when notification should be sent. Only future values are acceptable.",
                        "type": "string",
                        "format": "date-time",
                        "example": "2022-12-12 10:00:00"
                    }
                },
                "type": "object"
            },
            "StoreOrderRequest": {
                "description": "Store order request",
                "required": [
                    "banquet_id"
                ],
                "properties": {
                    "banquet_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "spaces": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/StoreOrderRequestSpaceField"
                        }
                    },
                    "tickets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/StoreOrderRequestTicketField"
                        }
                    },
                    "services": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/StoreOrderRequestServiceField"
                        }
                    },
                    "products": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/StoreOrderRequestProductField"
                        }
                    },
                    "comments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AttachingComment"
                        }
                    },
                    "discounts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AttachingDiscount"
                        }
                    }
                },
                "type": "object"
            },
            "StoreOrderRequestSpaceField": {
                "description": "Store order request space field",
                "required": [
                    "space_id"
                ],
                "properties": {
                    "space_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "start_at": {
                        "description": "If not present then banquet start_at date will be used.",
                        "type": "string",
                        "format": "date-time"
                    },
                    "end_at": {
                        "description": "If not present then banquet end_at date will be used.",
                        "type": "string",
                        "format": "date-time"
                    },
                    "comments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AttachingComment"
                        }
                    },
                    "discounts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AttachingDiscount"
                        }
                    }
                },
                "type": "object"
            },
            "StoreOrderRequestTicketField": {
                "description": "Store order request ticket field",
                "required": [
                    "ticket_id",
                    "amount"
                ],
                "properties": {
                    "ticket_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "amount": {
                        "type": "integer",
                        "example": 5
                    },
                    "comments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AttachingComment"
                        }
                    },
                    "discounts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AttachingDiscount"
                        }
                    }
                },
                "type": "object"
            },
            "StoreOrderRequestServiceField": {
                "description": "Store order request service field",
                "required": [
                    "service_id",
                    "amount",
                    "duration"
                ],
                "properties": {
                    "service_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "amount": {
                        "type": "integer",
                        "example": 1
                    },
                    "duration": {
                        "description": "Duration of the service rental in minutes.",
                        "type": "integer",
                        "example": 90
                    },
                    "comments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AttachingComment"
                        }
                    },
                    "discounts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AttachingDiscount"
                        }
                    }
                },
                "type": "object"
            },
            "StoreOrderRequestProductField": {
                "description": "Store order request product field",
                "required": [
                    "product_id",
                    "variant_id",
                    "amount"
                ],
                "properties": {
                    "product_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "variant_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "amount": {
                        "type": "integer",
                        "example": 3
                    },
                    "comments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AttachingComment"
                        }
                    },
                    "discounts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AttachingDiscount"
                        }
                    }
                },
                "type": "object"
            },
            "UpdateOrderRequest": {
                "description": "Update order request",
                "properties": {
                    "spaces": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/StoreOrderRequestSpaceField"
                        }
                    },
                    "tickets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/StoreOrderRequestTicketField"
                        }
                    },
                    "services": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/StoreOrderRequestServiceField"
                        }
                    },
                    "products": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/StoreOrderRequestProductField"
                        }
                    },
                    "comments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AttachingComment"
                        }
                    },
                    "discounts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AttachingDiscount"
                        }
                    }
                },
                "type": "object"
            },
            "StoreRestaurantReviewRequest": {
                "description": "Store restaurant review request",
                "required": [
                    "restaurant_id",
                    "ip",
                    "reviewer",
                    "score"
                ],
                "properties": {
                    "restaurant_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "ip": {
                        "type": "string",
                        "example": "127.0.0.1"
                    },
                    "reviewer": {
                        "type": "string",
                        "example": "Steve"
                    },
                    "score": {
                        "description": "Min value: `0`, max value: `5`.",
                        "type": "integer",
                        "example": 5
                    },
                    "title": {
                        "type": "string",
                        "example": "Great",
                        "nullable": "null"
                    },
                    "description": {
                        "type": "string",
                        "example": "This is a great establishment, nice personnel.",
                        "nullable": "null"
                    }
                },
                "type": "object"
            },
            "UpdateUserRequest": {
                "description": "Update user request",
                "properties": {
                    "name": {
                        "type": "string",
                        "example": "John"
                    },
                    "email": {
                        "type": "string",
                        "example": "ben.forrester@email.com"
                    },
                    "password": {
                        "description": "This is a new password. It must be different than the current one.",
                        "type": "string",
                        "example": "new-pa$$w0rd"
                    },
                    "current_password": {
                        "description": "This is a current password. It is needed in order to perform\n     authorization. Required with `password`.",
                        "type": "string",
                        "example": "pa$$w0rd"
                    }
                },
                "type": "object"
            },
            "Banquet": {
                "description": "Banquet resource object",
                "required": [
                    "id",
                    "type",
                    "state",
                    "available_states",
                    "is_editable",
                    "can_edit",
                    "title",
                    "description",
                    "start_at",
                    "end_at",
                    "paid_at",
                    "advance_amount",
                    "totals",
                    "invoice_url",
                    "order_id",
                    "creator_id",
                    "customer_id",
                    "restaurant_id"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "type": {
                        "type": "string",
                        "example": "banquets"
                    },
                    "state": {
                        "type": "string",
                        "enum": [
                            "draft",
                            "new",
                            "processing",
                            "completed",
                            "cancelled"
                        ],
                        "example": "draft"
                    },
                    "available_states": {
                        "description": "List of states, to which banquet may be transferred.",
                        "type": "array",
                        "items": {
                            "type": "string",
                            "enum": [
                                "draft",
                                "new",
                                "processing",
                                "completed",
                                "cancelled"
                            ],
                            "example": "new"
                        }
                    },
                    "is_editable": {
                        "description": "Determines if banquet can be edited.",
                        "type": "boolean",
                        "example": "true"
                    },
                    "can_edit": {
                        "description": "Determines if logged in user can edit this banquet.",
                        "type": "boolean",
                        "example": "true"
                    },
                    "title": {
                        "type": "string",
                        "example": "Banquet title."
                    },
                    "description": {
                        "type": "string",
                        "example": "Banquet description...",
                        "nullable": "true"
                    },
                    "start_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "end_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "paid_at": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": "true"
                    },
                    "advance_amount": {
                        "type": "integer",
                        "example": 125.55
                    },
                    "totals": {
                        "$ref": "#/components/schemas/OrderTotals"
                    },
                    "invoice_url": {
                        "type": "string",
                        "example": "host/path?signature=long-string",
                        "nullable": "true"
                    },
                    "order_id": {
                        "type": "integer",
                        "example": 1,
                        "nullable": "true"
                    },
                    "creator_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "customer_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "restaurant_id": {
                        "type": "integer",
                        "example": 1,
                        "nullable": "true"
                    },
                    "creator": {
                        "$ref": "#/components/schemas/User"
                    },
                    "customer": {
                        "$ref": "#/components/schemas/Customer"
                    },
                    "comments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Comment"
                        }
                    },
                    "discounts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Discount"
                        }
                    }
                },
                "type": "object"
            },
            "Category": {
                "description": "Category resource object",
                "required": [
                    "id",
                    "type",
                    "slug",
                    "target",
                    "title",
                    "description",
                    "media"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "slug": {
                        "type": "string",
                        "example": "pizza"
                    },
                    "type": {
                        "type": "string",
                        "example": "categories"
                    },
                    "target": {
                        "type": "string",
                        "example": "products",
                        "nullable": "true"
                    },
                    "title": {
                        "type": "string",
                        "example": "Pizza"
                    },
                    "description": {
                        "example": "Some text...",
                        "nullable": "true"
                    },
                    "media": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Media"
                        }
                    }
                },
                "type": "object"
            },
            "Comment": {
                "description": "Comment resource object",
                "required": [
                    "id",
                    "type",
                    "text",
                    "commentable_id",
                    "commentable_type"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "type": {
                        "type": "string",
                        "example": "comments"
                    },
                    "text": {
                        "type": "string",
                        "example": "This is a comment."
                    },
                    "commentable_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "commentable_type": {
                        "type": "string",
                        "example": "products"
                    }
                },
                "type": "object"
            },
            "Customer": {
                "description": "Customer resource object",
                "required": [
                    "id",
                    "type",
                    "name",
                    "surname",
                    "email",
                    "phone",
                    "birthdate"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "type": {
                        "type": "string",
                        "example": "customers"
                    },
                    "name": {
                        "type": "string",
                        "example": "John"
                    },
                    "surname": {
                        "type": "string",
                        "example": "Doe"
                    },
                    "phone": {
                        "type": "string",
                        "example": "+380507777777"
                    },
                    "email": {
                        "type": "string",
                        "example": "john.doe@email.com",
                        "nullable": "true"
                    },
                    "birthdate": {
                        "type": "string",
                        "format": "date",
                        "example": "1986-01-26",
                        "nullable": "true"
                    },
                    "family_members": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FamilyMember"
                        }
                    },
                    "comments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Comment"
                        }
                    }
                },
                "type": "object"
            },
            "Discount": {
                "description": "Discount resource object",
                "required": [
                    "id",
                    "type",
                    "target",
                    "title",
                    "description",
                    "amount",
                    "percent"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "type": {
                        "type": "string",
                        "example": "discounts"
                    },
                    "target": {
                        "type": "string",
                        "example": "orders",
                        "nullable": "true"
                    },
                    "title": {
                        "type": "string",
                        "example": "Discount title."
                    },
                    "description": {
                        "type": "string",
                        "example": "Discount description...",
                        "nullable": "true"
                    },
                    "amount": {
                        "type": "float",
                        "example": 125.55,
                        "nullable": "true"
                    },
                    "percent": {
                        "type": "float",
                        "example": 25.5,
                        "nullable": "true"
                    }
                },
                "type": "object"
            },
            "FamilyMember": {
                "description": "Family member resource object",
                "required": [
                    "id",
                    "type",
                    "name",
                    "relation",
                    "birthdate",
                    "relative_id"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "type": {
                        "type": "string",
                        "example": "family-members"
                    },
                    "name": {
                        "type": "string",
                        "example": "Tommy Doe"
                    },
                    "relation": {
                        "type": "string",
                        "enum": [
                            "child",
                            "parent",
                            "grandparent",
                            "partner"
                        ]
                    },
                    "birthdate": {
                        "type": "string",
                        "example": "1986-01-26"
                    },
                    "relative_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "relative": {
                        "$ref": "#/components/schemas/Customer"
                    }
                },
                "type": "object"
            },
            "ProductOrderField": {
                "description": "Product order field resource object",
                "required": [
                    "id",
                    "type",
                    "order_id",
                    "product_id",
                    "variant_id",
                    "amount",
                    "total",
                    "discounts_amount",
                    "discounts_percent",
                    "discounted_total"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "type": {
                        "type": "string",
                        "example": "product-order-fields"
                    },
                    "order_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "product_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "variant_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "amount": {
                        "type": "integer",
                        "example": 5
                    },
                    "total": {
                        "type": "float",
                        "example": 125.55
                    },
                    "discounts_amount": {
                        "type": "float",
                        "example": 25.55
                    },
                    "discounts_percent": {
                        "type": "float",
                        "example": 12.5
                    },
                    "discounted_total": {
                        "type": "float",
                        "example": 100
                    },
                    "comments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Comment"
                        }
                    },
                    "discounts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Discount"
                        }
                    }
                },
                "type": "object"
            },
            "ServiceOrderField": {
                "description": "Service order field resource object",
                "required": [
                    "id",
                    "type",
                    "order_id",
                    "service_id",
                    "amount",
                    "duration",
                    "total",
                    "discounts_amount",
                    "discounts_percent",
                    "discounted_total"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "type": {
                        "type": "string",
                        "example": "service-order-fields"
                    },
                    "order_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "service_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "amount": {
                        "type": "integer",
                        "example": 5
                    },
                    "duration": {
                        "type": "integer",
                        "example": 90
                    },
                    "total": {
                        "type": "float",
                        "example": 125.55
                    },
                    "discounts_amount": {
                        "type": "float",
                        "example": 25.55
                    },
                    "discounts_percent": {
                        "type": "float",
                        "example": 12.5
                    },
                    "discounted_total": {
                        "type": "float",
                        "example": 100
                    },
                    "comments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Comment"
                        }
                    },
                    "discounts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Discount"
                        }
                    }
                },
                "type": "object"
            },
            "SpaceOrderField": {
                "description": "Space order field resource object",
                "required": [
                    "id",
                    "type",
                    "order_id",
                    "space_id",
                    "start_at",
                    "end_at",
                    "total",
                    "discounts_amount",
                    "discounts_percent",
                    "discounted_total"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "type": {
                        "type": "string",
                        "example": "space-order-fields"
                    },
                    "order_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "space_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "start_at": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2022-01-12 11:00:00"
                    },
                    "end_at": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2022-01-12 23:00:00"
                    },
                    "duration": {
                        "type": "int",
                        "example": 60
                    },
                    "total": {
                        "type": "float",
                        "example": 159.99
                    },
                    "discounts_amount": {
                        "type": "float",
                        "example": 25.55
                    },
                    "discounts_percent": {
                        "type": "float",
                        "example": 12.5
                    },
                    "discounted_total": {
                        "type": "float",
                        "example": 100
                    },
                    "comments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Comment"
                        }
                    },
                    "discounts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Discount"
                        }
                    }
                },
                "type": "object"
            },
            "SpaceReservation": {
                "description": "Space reservation resource object",
                "required": [
                    "type",
                    "order_id",
                    "space_id",
                    "start_at",
                    "end_at",
                    "duration"
                ],
                "properties": {
                    "type": {
                        "type": "string",
                        "example": "space-order-fields"
                    },
                    "order_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "space_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "start_at": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2022-01-12 11:00:00"
                    },
                    "end_at": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2022-01-12 23:00:00"
                    },
                    "duration": {
                        "type": "int",
                        "example": "720"
                    }
                },
                "type": "object"
            },
            "TicketOrderField": {
                "description": "Ticket order field resource object",
                "required": [
                    "id",
                    "type",
                    "order_id",
                    "ticket_id",
                    "amount",
                    "total",
                    "discounts_amount",
                    "discounts_percent",
                    "discounted_total"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "type": {
                        "type": "string",
                        "example": "ticket-order-fields"
                    },
                    "order_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "ticket_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "amount": {
                        "type": "integer",
                        "example": 5
                    },
                    "total": {
                        "type": "float",
                        "example": 125
                    },
                    "discounts_amount": {
                        "type": "float",
                        "example": 25.55
                    },
                    "discounts_percent": {
                        "type": "float",
                        "example": 12.5
                    },
                    "discounted_total": {
                        "type": "float",
                        "example": 100
                    },
                    "comments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Comment"
                        }
                    },
                    "discounts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Discount"
                        }
                    }
                },
                "type": "object"
            },
            "Holiday": {
                "description": "Holiday resource object",
                "required": [
                    "id",
                    "type",
                    "name",
                    "description",
                    "date"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "type": {
                        "type": "string",
                        "example": "holidays"
                    },
                    "name": {
                        "type": "string",
                        "example": "Random holiday"
                    },
                    "description": {
                        "type": "string",
                        "example": "null",
                        "nullable": "true"
                    },
                    "date": {
                        "type": "string",
                        "format": "date",
                        "example": "2022-01-12"
                    },
                    "closest_date": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2022-01-12 10:00:00",
                        "nullable": "true"
                    }
                },
                "type": "object"
            },
            "Media": {
                "description": "Media resource object",
                "required": [
                    "id",
                    "type",
                    "name",
                    "extension",
                    "title",
                    "description",
                    "disk",
                    "folder",
                    "order",
                    "url"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "type": {
                        "type": "string",
                        "example": "media"
                    },
                    "name": {
                        "type": "string",
                        "example": "drinks.svg"
                    },
                    "extension": {
                        "type": "string",
                        "example": "svg"
                    },
                    "title": {
                        "type": "string",
                        "example": "Drinks",
                        "nullable": "true"
                    },
                    "description": {
                        "type": "string",
                        "nullable": "true"
                    },
                    "disk": {
                        "type": "string",
                        "example": "public",
                        "nullable": "true"
                    },
                    "folder": {
                        "description": "Must start and end with `/`.",
                        "type": "string",
                        "example": "/"
                    },
                    "order": {
                        "type": "integer",
                        "example": 1,
                        "nullable": "true"
                    },
                    "url": {
                        "type": "string",
                        "example": "http://localhost/storage/drinks.svg"
                    }
                },
                "type": "object"
            },
            "Menu": {
                "description": "Menu resource object",
                "required": [
                    "id",
                    "type",
                    "title",
                    "description",
                    "categories",
                    "archived",
                    "popularity",
                    "media"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "type": {
                        "type": "string",
                        "example": "menus"
                    },
                    "title": {
                        "type": "string",
                        "example": "Kitchen"
                    },
                    "description": {
                        "type": "string",
                        "example": "Some text..."
                    },
                    "archived": {
                        "type": "boolean",
                        "example": "false"
                    },
                    "popularity": {
                        "type": "integer",
                        "example": "1",
                        "nullable": "true"
                    },
                    "products": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Product"
                        }
                    },
                    "categories": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Category"
                        }
                    },
                    "media": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Media"
                        }
                    }
                },
                "type": "object"
            },
            "NotificationsPoll": {
                "description": "Notifications poll resource object",
                "required": [
                    "count"
                ],
                "properties": {
                    "count": {
                        "type": "integer",
                        "example": 1
                    }
                },
                "type": "object"
            },
            "Notification": {
                "description": "Notification resource object",
                "required": [
                    "id",
                    "type",
                    "sender_id",
                    "receiver_id",
                    "channel",
                    "subject",
                    "body",
                    "payload",
                    "send_at",
                    "sent_at",
                    "seen_at"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "type": {
                        "type": "string",
                        "example": "notifications"
                    },
                    "channel": {
                        "type": "string",
                        "example": "default"
                    },
                    "subject": {
                        "type": "string",
                        "example": "Order status change"
                    },
                    "body": {
                        "type": "string",
                        "example": "Your order was accepted",
                        "nullable": "true"
                    },
                    "payload": {
                        "type": "object",
                        "nullable": "true"
                    },
                    "sender_id": {
                        "type": "integer",
                        "example": 1,
                        "nullable": "true"
                    },
                    "receiver_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "send_at": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2022-01-12 23:00:00"
                    },
                    "sent_at": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2022-01-12 23:00:00",
                        "nullable": "true"
                    },
                    "seen_at": {
                        "type": "string",
                        "format": "date-time",
                        "example": "null",
                        "nullable": "true"
                    }
                },
                "type": "object"
            },
            "OrderTotals": {
                "description": "Order totals resource object",
                "required": [
                    "all",
                    "spaces",
                    "tickets",
                    "services",
                    "products",
                    "invoice_url"
                ],
                "properties": {
                    "all": {
                        "type": "float",
                        "example": 40.04
                    },
                    "spaces": {
                        "type": "float",
                        "example": 10.01
                    },
                    "tickets": {
                        "type": "float",
                        "example": 10.01
                    },
                    "services": {
                        "type": "float",
                        "example": 10.01
                    },
                    "products": {
                        "type": "float",
                        "example": 10.01
                    }
                },
                "type": "object"
            },
            "Order": {
                "description": "Order resource object",
                "required": [
                    "id",
                    "type",
                    "totals",
                    "banquet_id"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "type": {
                        "type": "string",
                        "example": "orders"
                    },
                    "totals": {
                        "$ref": "#/components/schemas/OrderTotals"
                    },
                    "banquet_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "invoice_url": {
                        "type": "string",
                        "example": "host/path?signature=long-string",
                        "nullable": "true"
                    },
                    "spaces": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/SpaceOrderField"
                        }
                    },
                    "tickets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TicketOrderField"
                        }
                    },
                    "products": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ProductOrderField"
                        }
                    },
                    "services": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ServiceOrderField"
                        }
                    },
                    "comments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Comment"
                        }
                    },
                    "discounts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Discount"
                        }
                    }
                },
                "type": "object"
            },
            "Product": {
                "description": "Product resource object",
                "required": [
                    "id",
                    "type",
                    "title",
                    "description",
                    "price",
                    "weight",
                    "weight_unit",
                    "badge",
                    "archived",
                    "popularity",
                    "variants",
                    "category_ids",
                    "media"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "type": {
                        "type": "string",
                        "example": "products"
                    },
                    "title": {
                        "type": "string",
                        "example": "Margarita"
                    },
                    "description": {
                        "type": "string",
                        "example": "Some text...",
                        "nullable": "true"
                    },
                    "price": {
                        "type": "float",
                        "example": 15.99
                    },
                    "weight": {
                        "type": "float",
                        "example": 120,
                        "nullable": "true"
                    },
                    "weight_unit": {
                        "type": "string",
                        "enum": [
                            "g",
                            "kg",
                            "ml",
                            "l",
                            "cm"
                        ],
                        "example": "g",
                        "nullable": "true"
                    },
                    "badge": {
                        "type": "string",
                        "example": "New",
                        "nullable": "true"
                    },
                    "archived": {
                        "type": "boolean",
                        "example": "false"
                    },
                    "popularity": {
                        "type": "integer",
                        "example": "1",
                        "nullable": "true"
                    },
                    "variants": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ProductVariant"
                        }
                    },
                    "categories": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Category"
                        }
                    },
                    "category_ids": {
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "example": 1
                        }
                    },
                    "media": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Media"
                        }
                    }
                },
                "type": "object"
            },
            "ProductVariant": {
                "description": "Product variant resource object",
                "required": [
                    "id",
                    "type",
                    "product_id",
                    "price",
                    "weight",
                    "weight_unit"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "product_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "type": {
                        "type": "string",
                        "example": "product-variants"
                    },
                    "price": {
                        "type": "float",
                        "example": 15.99
                    },
                    "weight": {
                        "type": "float",
                        "example": 120
                    },
                    "weight_unit": {
                        "type": "string",
                        "enum": [
                            "g",
                            "kg",
                            "ml",
                            "l",
                            "cm"
                        ],
                        "example": "g"
                    }
                },
                "type": "object"
            },
            "Links": {
                "description": "Pagination meta links object.",
                "required": [
                    "first",
                    "prev",
                    "self",
                    "next",
                    "last"
                ],
                "properties": {
                    "first": {
                        "type": "string"
                    },
                    "prev": {
                        "type": "string",
                        "example": null,
                        "nullable": "true"
                    },
                    "self": {
                        "type": "string"
                    },
                    "next": {
                        "type": "string",
                        "example": null,
                        "nullable": "true"
                    },
                    "last": {
                        "type": "string",
                        "example": null,
                        "nullable": "true"
                    }
                },
                "type": "object"
            },
            "PaginationMeta": {
                "description": "Pagination meta object.",
                "required": [
                    "from",
                    "to",
                    "total",
                    "path",
                    "per_page",
                    "current_page",
                    "last_page",
                    "links"
                ],
                "properties": {
                    "from": {
                        "type": "integer",
                        "example": 1,
                        "nullable": "true"
                    },
                    "to": {
                        "type": "integer",
                        "example": 1,
                        "nullable": "true"
                    },
                    "total": {
                        "type": "integer",
                        "example": 30
                    },
                    "path": {
                        "type": "integer",
                        "example": null,
                        "nullable": "true"
                    },
                    "per_page": {
                        "type": "integer",
                        "example": 1
                    },
                    "current_page": {
                        "type": "integer",
                        "example": 1
                    },
                    "last_page": {
                        "type": "integer",
                        "example": 2
                    },
                    "links": {
                        "$ref": "#/components/schemas/Links"
                    }
                },
                "type": "object"
            },
            "Restaurant": {
                "description": "Restaurant resource object",
                "required": [
                    "id",
                    "type",
                    "slug",
                    "name",
                    "country",
                    "city",
                    "place",
                    "timezone",
                    "timezone_offset",
                    "popularity",
                    "media"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "type": {
                        "type": "string",
                        "example": "restaurants"
                    },
                    "slug": {
                        "type": "string",
                        "example": "first"
                    },
                    "name": {
                        "type": "string",
                        "example": "First"
                    },
                    "country": {
                        "type": "string",
                        "example": "Ukraine"
                    },
                    "city": {
                        "type": "string",
                        "example": "Uzhhorod"
                    },
                    "place": {
                        "type": "string",
                        "example": "Koryatovycha Square, 1а"
                    },
                    "timezone": {
                        "type": "string",
                        "example": "Europe/Kyiv"
                    },
                    "timezone_offset": {
                        "description": "Selected timezone offset in minutes.",
                        "type": "integer",
                        "example": 180
                    },
                    "popularity": {
                        "type": "integer",
                        "example": 1,
                        "nullable": "true"
                    },
                    "media": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Media"
                        }
                    },
                    "schedules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Schedule"
                        }
                    }
                },
                "type": "object"
            },
            "RestaurantReview": {
                "description": "Restaurant review resource object",
                "required": [
                    "id",
                    "type",
                    "restaurant_id",
                    "ip",
                    "reviewer",
                    "score",
                    "title",
                    "description",
                    "created_at",
                    "updated_at"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "type": {
                        "type": "string",
                        "example": "restaurant-reviews"
                    },
                    "restaurant_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "ip": {
                        "type": "string",
                        "example": "127.0.0.1"
                    },
                    "reviewer": {
                        "type": "string",
                        "example": "Steve"
                    },
                    "score": {
                        "description": "Min value: `0`, max value: `5`.",
                        "type": "integer",
                        "example": 5
                    },
                    "title": {
                        "type": "string",
                        "example": "Great",
                        "nullable": "true"
                    },
                    "description": {
                        "type": "string",
                        "example": "The restaurant is great and the personnel is nice.",
                        "nullable": "true"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2022-01-12 10:00:00",
                        "nullable": "true"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2022-01-12 10:00:00",
                        "nullable": "true"
                    }
                },
                "type": "object"
            },
            "Schedule": {
                "description": "Schedule resource object",
                "required": [
                    "id",
                    "type",
                    "weekday",
                    "beg_hour",
                    "end_hour",
                    "beg_minute",
                    "end_minute",
                    "restaurant_id",
                    "begs_in",
                    "ends_in",
                    "is_cross_date",
                    "closest_date",
                    "timezone",
                    "timezone_offset"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "type": {
                        "type": "string",
                        "example": "schedules"
                    },
                    "weekday": {
                        "type": "string",
                        "enum": [
                            "monday",
                            "tuesday",
                            "wednesday",
                            "thursday",
                            "friday",
                            "saturday",
                            "sunday"
                        ],
                        "example": "monday"
                    },
                    "beg_hour": {
                        "description": "Start hour of the day [0 ; 23].",
                        "type": "integer",
                        "example": 9
                    },
                    "end_hour": {
                        "description": "End hour of the day [0 ; 23]. If less then beg_hour it,\n     *   then it meens that it's a cross day schedule",
                        "type": "integer",
                        "example": 23
                    },
                    "beg_minute": {
                        "description": "Start minute of the day [0 ; 59].",
                        "type": "integer",
                        "example": 0
                    },
                    "end_minute": {
                        "description": "End minute of the day [0 ; 59].",
                        "type": "integer",
                        "example": 30
                    },
                    "restaurant_id": {
                        "type": "integer",
                        "example": null,
                        "nullable": "true"
                    },
                    "begs_in": {
                        "description": "Number of minutes untill the restaurant starts operating.\n     If null then restaurant is already operating on this schedule.",
                        "type": "integer",
                        "example": 30,
                        "nullable": "true"
                    },
                    "ends_in": {
                        "description": "Number of minutes untill the restaurant ends operating.",
                        "type": "integer",
                        "example": 780,
                        "nullable": "true"
                    },
                    "is_cross_date": {
                        "type": "boolean",
                        "example": false
                    },
                    "closest_date": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2022-01-12 10:00:00",
                        "nullable": "true"
                    },
                    "timezone": {
                        "type": "string",
                        "example": "Europe/Kyiv",
                        "nullable": "true"
                    },
                    "timezone_offset": {
                        "description": "Minutes offset from UTC, which is already applied to `closest_date`",
                        "type": "integer",
                        "example": 3,
                        "nullable": "true"
                    }
                },
                "type": "object"
            },
            "Service": {
                "description": "Service resource object",
                "required": [
                    "id",
                    "type",
                    "title",
                    "description",
                    "once_paid_price",
                    "hourly_paid_price",
                    "archived",
                    "popularity",
                    "category_ids",
                    "media"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "type": {
                        "type": "string",
                        "example": "services"
                    },
                    "title": {
                        "type": "string",
                        "example": "Clown Show"
                    },
                    "description": {
                        "type": "string",
                        "example": "Some text...",
                        "nullable": "true"
                    },
                    "once_paid_price": {
                        "type": "float",
                        "example": 350
                    },
                    "hourly_paid_price": {
                        "type": "float",
                        "example": 200
                    },
                    "archived": {
                        "type": "boolean",
                        "example": "false"
                    },
                    "popularity": {
                        "type": "integer",
                        "example": "1",
                        "nullable": "true"
                    },
                    "categories": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Category"
                        }
                    },
                    "category_ids": {
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "example": 1
                        }
                    },
                    "media": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Media"
                        }
                    }
                },
                "type": "object"
            },
            "Space": {
                "description": "Space resource object",
                "required": [
                    "id",
                    "type",
                    "title",
                    "description",
                    "floor",
                    "number",
                    "price",
                    "archived",
                    "popularity",
                    "category_ids",
                    "media"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "type": {
                        "type": "string",
                        "example": "spaces"
                    },
                    "title": {
                        "type": "string",
                        "example": "Room #1(1)"
                    },
                    "description": {
                        "type": "string",
                        "example": "Some text..."
                    },
                    "floor": {
                        "type": "integer",
                        "example": 1
                    },
                    "number": {
                        "type": "integer",
                        "example": 1
                    },
                    "price": {
                        "type": "float",
                        "example": 15.99
                    },
                    "archived": {
                        "type": "boolean",
                        "example": "false"
                    },
                    "popularity": {
                        "type": "integer",
                        "example": "1",
                        "nullable": "true"
                    },
                    "categories": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Category"
                        }
                    },
                    "category_ids": {
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "example": 1
                        }
                    },
                    "media": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Media"
                        }
                    }
                },
                "type": "object"
            },
            "Ticket": {
                "description": "Ticket resource object",
                "required": [
                    "id",
                    "type",
                    "title",
                    "description",
                    "price",
                    "archived",
                    "popularity",
                    "category_ids",
                    "media"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "type": {
                        "type": "string",
                        "example": "tickets"
                    },
                    "title": {
                        "type": "string",
                        "example": "Child ticket"
                    },
                    "description": {
                        "type": "string",
                        "example": "Some text..."
                    },
                    "price": {
                        "type": "float",
                        "example": 19.6
                    },
                    "archived": {
                        "type": "boolean",
                        "example": "false"
                    },
                    "popularity": {
                        "type": "integer",
                        "example": "1",
                        "nullable": "true"
                    },
                    "categories": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Category"
                        }
                    },
                    "category_ids": {
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "example": 1
                        }
                    },
                    "media": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Media"
                        }
                    }
                },
                "type": "object"
            },
            "User": {
                "description": "User resource object",
                "required": [
                    "id",
                    "type",
                    "restaurant_id",
                    "customer_id",
                    "name",
                    "email",
                    "email_verified_at"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "type": {
                        "type": "string",
                        "example": "users"
                    },
                    "restaurant_id": {
                        "type": "integer",
                        "example": "null",
                        "nullable": "true"
                    },
                    "customer_id": {
                        "type": "integer",
                        "example": "null",
                        "nullable": "true"
                    },
                    "name": {
                        "type": "string",
                        "example": "Admin Admins"
                    },
                    "email": {
                        "type": "string",
                        "example": "admin@email.com",
                        "nullable": "true"
                    },
                    "email_verified_at": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": "true"
                    },
                    "customer": {
                        "$ref": "#/components/schemas/Customer"
                    }
                },
                "type": "object"
            },
            "ArchivedParameter": {
                "description": "Query parameter, which determines if archived records should be\n    fetched from database. Available relations: `only`, `with` and `without`, which is a default one.",
                "type": "string",
                "enum": [
                    "only",
                    "with",
                    "without"
                ],
                "example": "without"
            }
        },
        "securitySchemes": {
            "bearerAuth": {
                "type": "http",
                "scheme": "bearer"
            }
        }
    },
    "security": [
        []
    ]
}