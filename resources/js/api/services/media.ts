/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * imperia-api
 * OpenAPI spec version: 0.1
 */
import axios from "axios";
import type { AxiosRequestConfig, AxiosResponse } from "axios";

import type {
  DestroyMediaResponse,
  DestroyRequest,
  GetModelMediaParams,
  GetModelMediaResponse,
  IndexMediaParams,
  IndexMediaResponse,
  SetModelMediaRequest,
  SetModelMediaResponse,
  ShowMediaParams,
  ShowMediaResponse,
  StoreMediaBody,
  StoreMediaResponse,
  UpdateMediaRequest,
  UpdateMediaResponse,
} from "../models";

/**
 * @summary Index media.
 */
export const indexMedia = <TData = AxiosResponse<IndexMediaResponse>>(
  params?: IndexMediaParams,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.get(`/api/media`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};
/**
 * @summary Store media.
 */
export const storeMedia = <TData = AxiosResponse<StoreMediaResponse>>(
  storeMediaBody: StoreMediaBody,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  const formData = new FormData();
  formData.append(`file`, storeMediaBody.file);
  formData.append(`name`, storeMediaBody.name);
  if (storeMediaBody.title !== undefined && storeMediaBody.title !== null) {
    formData.append(`title`, storeMediaBody.title);
  }
  if (
    storeMediaBody.description !== undefined &&
    storeMediaBody.description !== null
  ) {
    formData.append(`description`, storeMediaBody.description);
  }
  if (storeMediaBody.disk !== undefined) {
    formData.append(`disk`, storeMediaBody.disk);
  }
  if (storeMediaBody.folder !== undefined) {
    formData.append(`folder`, storeMediaBody.folder);
  }
  if (
    storeMediaBody.metadata !== undefined &&
    storeMediaBody.metadata !== null
  ) {
    formData.append(`metadata`, storeMediaBody.metadata);
  }

  if (storeMediaBody.file !== undefined) {
    formData.append(`file`, storeMediaBody.file);
  }

  return axios.post(`/api/media`, formData, options);
};
/**
 * @summary Show media by id.
 */
export const showMedia = <TData = AxiosResponse<ShowMediaResponse>>(
  id: number,
  params?: ShowMediaParams,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.get(`/api/media/${id}`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};
/**
 * @summary Delete media.
 */
export const destroyMedia = <TData = AxiosResponse<DestroyMediaResponse>>(
  id: number,
  destroyRequest?: DestroyRequest,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.delete(`/api/media/${id}`, { data: destroyRequest, ...options });
};
/**
 * @summary Update media.
 */
export const updateMedia = <TData = AxiosResponse<UpdateMediaResponse>>(
  id: number,
  updateMediaRequest: UpdateMediaRequest,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.patch(`/api/media/${id}`, updateMediaRequest, options);
};
/**
 * @summary Get model's media.
 */
export const getModelMedia = <TData = AxiosResponse<GetModelMediaResponse>>(
  params: GetModelMediaParams,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.get(`/api/model-media`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};
/**
 * @summary Set model's media.
 */
export const setModelMedia = <TData = AxiosResponse<SetModelMediaResponse>>(
  setModelMediaRequest?: SetModelMediaRequest,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.post(`/api/model-media`, setModelMediaRequest, options);
};
export type IndexMediaResult = AxiosResponse<IndexMediaResponse>;
export type StoreMediaResult = AxiosResponse<StoreMediaResponse>;
export type ShowMediaResult = AxiosResponse<ShowMediaResponse>;
export type DestroyMediaResult = AxiosResponse<DestroyMediaResponse>;
export type UpdateMediaResult = AxiosResponse<UpdateMediaResponse>;
export type GetModelMediaResult = AxiosResponse<GetModelMediaResponse>;
export type SetModelMediaResult = AxiosResponse<SetModelMediaResponse>;
