/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * imperia-api
 * OpenAPI spec version: 0.1
 */
import axios from "axios";
import type { AxiosRequestConfig, AxiosResponse } from "axios";

import type {
  DestroyNotificationResponse,
  DestroyRequest,
  IndexNotificationResponse,
  IndexNotificationsParams,
  PollNotificationsParams,
  PollNotificationsResponse,
  ShowNotificationResponse,
  StoreNotificationRequest,
  StoreNotificationResponse,
  UpdateNotificationRequest,
  UpdateNotificationResponse,
} from "../models";

/**
 * @summary Index notifications.
 */
export const indexNotifications = <
  TData = AxiosResponse<IndexNotificationResponse>,
>(
  params?: IndexNotificationsParams,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.get(`/api/notifications`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};
/**
 * @summary Store notification.
 */
export const storeNotification = <
  TData = AxiosResponse<StoreNotificationResponse>,
>(
  storeNotificationRequest: StoreNotificationRequest,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.post(`/api/notifications`, storeNotificationRequest, options);
};
/**
 * @summary Show notification by id.
 */
export const showNotification = <
  TData = AxiosResponse<ShowNotificationResponse>,
>(
  id: number,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.get(`/api/notifications/${id}`, options);
};
/**
 * @summary Delete notification.
 */
export const destroyNotification = <
  TData = AxiosResponse<DestroyNotificationResponse>,
>(
  id: number,
  destroyRequest?: DestroyRequest,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.delete(`/api/notifications/${id}`, {
    data: destroyRequest,
    ...options,
  });
};
/**
 * @summary Update notification.
 */
export const updateNotification = <
  TData = AxiosResponse<UpdateNotificationResponse>,
>(
  id: number,
  updateNotificationRequest: UpdateNotificationRequest,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.patch(
    `/api/notifications/${id}`,
    updateNotificationRequest,
    options,
  );
};
/**
 * @summary Poll notifications.
 */
export const pollNotifications = <
  TData = AxiosResponse<PollNotificationsResponse>,
>(
  params?: PollNotificationsParams,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.get(`/api/notifications/poll`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};
export type IndexNotificationsResult = AxiosResponse<IndexNotificationResponse>;
export type StoreNotificationResult = AxiosResponse<StoreNotificationResponse>;
export type ShowNotificationResult = AxiosResponse<ShowNotificationResponse>;
export type DestroyNotificationResult =
  AxiosResponse<DestroyNotificationResponse>;
export type UpdateNotificationResult =
  AxiosResponse<UpdateNotificationResponse>;
export type PollNotificationsResult = AxiosResponse<PollNotificationsResponse>;
